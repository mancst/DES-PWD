// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace user {

namespace {

const ::google::protobuf::Descriptor* UserSessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRemoteAppLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRemoteAppLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainPagePluginTables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainPagePluginTables_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemOtherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemOtherInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MUSER_FLAG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OP_VCODE_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_2eproto() {
  protobuf_AddDesc_user_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user.proto");
  GOOGLE_CHECK(file != NULL);
  UserSessionInfo_descriptor_ = file->message_type(0);
  static const int UserSessionInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, bind_DES-PWE_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, bind_DES-PWE_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, register_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, op_code_set_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, op_code_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, op_check_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, op_new_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, su_op_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, op_code_type_),
  };
  UserSessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSessionInfo_descriptor_,
      UserSessionInfo::default_instance_,
      UserSessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSessionInfo));
  UserRemoteAppLogInfo_descriptor_ = file->message_type(1);
  static const int UserRemoteAppLogInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemoteAppLogInfo, next_check_log_space_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemoteAppLogInfo, total_app_log_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemoteAppLogInfo, tmp_remain_app_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemoteAppLogInfo, oldest_log_file_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemoteAppLogInfo, oldest_log_file_time_),
  };
  UserRemoteAppLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRemoteAppLogInfo_descriptor_,
      UserRemoteAppLogInfo::default_instance_,
      UserRemoteAppLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemoteAppLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemoteAppLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRemoteAppLogInfo));
  MainPagePluginTables_descriptor_ = file->message_type(2);
  static const int MainPagePluginTables_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPagePluginTables, plugin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPagePluginTables, table_id_list_),
  };
  MainPagePluginTables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainPagePluginTables_descriptor_,
      MainPagePluginTables::default_instance_,
      MainPagePluginTables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPagePluginTables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainPagePluginTables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainPagePluginTables));
  SystemOtherInfo_descriptor_ = file->message_type(3);
  static const int SystemOtherInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemOtherInfo, main_plugin_tables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemOtherInfo, str_version_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemOtherInfo, cust_cloud_url_),
  };
  SystemOtherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemOtherInfo_descriptor_,
      SystemOtherInfo::default_instance_,
      SystemOtherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemOtherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemOtherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemOtherInfo));
  MUSER_FLAG_descriptor_ = file->enum_type(0);
  OP_VCODE_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSessionInfo_descriptor_, &UserSessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRemoteAppLogInfo_descriptor_, &UserRemoteAppLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainPagePluginTables_descriptor_, &MainPagePluginTables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemOtherInfo_descriptor_, &SystemOtherInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_2eproto() {
  delete UserSessionInfo::default_instance_;
  delete UserSessionInfo_reflection_;
  delete UserRemoteAppLogInfo::default_instance_;
  delete UserRemoteAppLogInfo_reflection_;
  delete MainPagePluginTables::default_instance_;
  delete MainPagePluginTables_reflection_;
  delete SystemOtherInfo::default_instance_;
  delete SystemOtherInfo_reflection_;
}

void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuser.proto\022\004user\"\221\002\n\017UserSessionInfo\022\033"
    "\n\023bind_DES-PWE_uid\030\001 \001(\005\022\033\n\023bind_xrkm"
    "onitor_key\030\002 \001(\014\022\r\n\005email\030\006 \001(\014\022\016\n\006mobil"
    "e\030\007 \001(\t\022\025\n\rregister_time\030\010 \001(\r\022\030\n\020op_cod"
    "e_set_time\030\t \001(\r\022\023\n\013op_code_val\030\n \001(\t\022\034\n"
    "\024op_check_expire_time\030\013 \001(\r\022\024\n\014op_new_em"
    "ail\030\014 \001(\014\022\025\n\rsu_op_user_id\030\016 \001(\r\022\024\n\014op_c"
    "ode_type\030\017 \001(\005\"\261\001\n\024UserRemoteAppLogInfo\022"
    "!\n\031next_check_log_space_time\030\002 \001(\r\022\032\n\022to"
    "tal_app_log_size\030\003 \001(\004\022\034\n\024tmp_remain_app"
    "_count\030\004 \001(\005\022\036\n\026oldest_log_file_app_id\030\005"
    " \001(\005\022\034\n\024oldest_log_file_time\030\006 \001(\r\"@\n\024Ma"
    "inPagePluginTables\022\021\n\tplugin_id\030\001 \001(\r\022\025\n"
    "\rtable_id_list\030\002 \003(\r\"{\n\017SystemOtherInfo\022"
    "6\n\022main_plugin_tables\030\001 \003(\0132\032.user.MainP"
    "agePluginTables\022\030\n\020str_version_info\030\002 \001("
    "\014\022\026\n\016cust_cloud_url\030\003 \001(\014*\323\001\n\nMUSER_FLAG"
    "\022\030\n\024MFLAG_WARN_SEND_FREQ\020\002\022\033\n\027MFLAG_WARN"
    "_SEND_ZB_ONLY\020\004\022\037\n\033MFLAG_WARN_SEND_ENABL"
    "E_TIME\020\010\022\030\n\024MFLAG_WARN_USE_EMAIL\020\020\022\031\n\025MF"
    "LAG_WARN_USE_MOBILE\020 \022\034\n\030MFLAG_WARN_USE_"
    "PC_CLIENT\020@\022\032\n\025MFLAG_WARN_USE_WEIXIN\020\200\001*"
    "(\n\rOP_VCODE_TYPE\022\027\n\023OP_VCODE_TYPE_EMAIL\020"
    "\001", 921);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user.proto", &protobuf_RegisterTypes);
  UserSessionInfo::default_instance_ = new UserSessionInfo();
  UserRemoteAppLogInfo::default_instance_ = new UserRemoteAppLogInfo();
  MainPagePluginTables::default_instance_ = new MainPagePluginTables();
  SystemOtherInfo::default_instance_ = new SystemOtherInfo();
  UserSessionInfo::default_instance_->InitAsDefaultInstance();
  UserRemoteAppLogInfo::default_instance_->InitAsDefaultInstance();
  MainPagePluginTables::default_instance_->InitAsDefaultInstance();
  SystemOtherInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;

const ::google::protobuf::EnumDescriptor* MUSER_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MUSER_FLAG_descriptor_;
}
bool MUSER_FLAG_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OP_VCODE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OP_VCODE_TYPE_descriptor_;
}
bool OP_VCODE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string UserSessionInfo::_default_bind_DES-PWE_key_;
const ::std::string UserSessionInfo::_default_email_;
const ::std::string UserSessionInfo::_default_mobile_;
const ::std::string UserSessionInfo::_default_op_code_val_;
const ::std::string UserSessionInfo::_default_op_new_email_;
#ifndef _MSC_VER
const int UserSessionInfo::kBindDES-PWEUidFieldNumber;
const int UserSessionInfo::kBindDES-PWEKeyFieldNumber;
const int UserSessionInfo::kEmailFieldNumber;
const int UserSessionInfo::kMobileFieldNumber;
const int UserSessionInfo::kRegisterTimeFieldNumber;
const int UserSessionInfo::kOpCodeSetTimeFieldNumber;
const int UserSessionInfo::kOpCodeValFieldNumber;
const int UserSessionInfo::kOpCheckExpireTimeFieldNumber;
const int UserSessionInfo::kOpNewEmailFieldNumber;
const int UserSessionInfo::kSuOpUserIdFieldNumber;
const int UserSessionInfo::kOpCodeTypeFieldNumber;
#endif  // !_MSC_VER

UserSessionInfo::UserSessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSessionInfo::InitAsDefaultInstance() {
}

UserSessionInfo::UserSessionInfo(const UserSessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSessionInfo::SharedCtor() {
  _cached_size_ = 0;
  bind_DES-PWE_uid_ = 0;
  bind_DES-PWE_key_ = const_cast< ::std::string*>(&_default_bind_DES-PWE_key_);
  email_ = const_cast< ::std::string*>(&_default_email_);
  mobile_ = const_cast< ::std::string*>(&_default_mobile_);
  register_time_ = 0u;
  op_code_set_time_ = 0u;
  op_code_val_ = const_cast< ::std::string*>(&_default_op_code_val_);
  op_check_expire_time_ = 0u;
  op_new_email_ = const_cast< ::std::string*>(&_default_op_new_email_);
  su_op_user_id_ = 0u;
  op_code_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSessionInfo::~UserSessionInfo() {
  SharedDtor();
}

void UserSessionInfo::SharedDtor() {
  if (bind_DES-PWE_key_ != &_default_bind_DES-PWE_key_) {
    delete bind_DES-PWE_key_;
  }
  if (email_ != &_default_email_) {
    delete email_;
  }
  if (mobile_ != &_default_mobile_) {
    delete mobile_;
  }
  if (op_code_val_ != &_default_op_code_val_) {
    delete op_code_val_;
  }
  if (op_new_email_ != &_default_op_new_email_) {
    delete op_new_email_;
  }
  if (this != default_instance_) {
  }
}

void UserSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSessionInfo_descriptor_;
}

const UserSessionInfo& UserSessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();  return *default_instance_;
}

UserSessionInfo* UserSessionInfo::default_instance_ = NULL;

UserSessionInfo* UserSessionInfo::New() const {
  return new UserSessionInfo;
}

void UserSessionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bind_DES-PWE_uid_ = 0;
    if (_has_bit(1)) {
      if (bind_DES-PWE_key_ != &_default_bind_DES-PWE_key_) {
        bind_DES-PWE_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (email_ != &_default_email_) {
        email_->clear();
      }
    }
    if (_has_bit(3)) {
      if (mobile_ != &_default_mobile_) {
        mobile_->clear();
      }
    }
    register_time_ = 0u;
    op_code_set_time_ = 0u;
    if (_has_bit(6)) {
      if (op_code_val_ != &_default_op_code_val_) {
        op_code_val_->clear();
      }
    }
    op_check_expire_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (op_new_email_ != &_default_op_new_email_) {
        op_new_email_->clear();
      }
    }
    su_op_user_id_ = 0u;
    op_code_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bind_DES-PWE_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_DES-PWE_uid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bind_DES-PWE_key;
        break;
      }
      
      // optional bytes bind_DES-PWE_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_DES-PWE_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bind_DES-PWE_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }
      
      // optional bytes email = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mobile;
        break;
      }
      
      // optional string mobile = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_register_time;
        break;
      }
      
      // optional uint32 register_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_register_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &register_time_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_op_code_set_time;
        break;
      }
      
      // optional uint32 op_code_set_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_code_set_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_code_set_time_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_op_code_val;
        break;
      }
      
      // optional string op_code_val = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_code_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_code_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->op_code_val().data(), this->op_code_val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_op_check_expire_time;
        break;
      }
      
      // optional uint32 op_check_expire_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_check_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_check_expire_time_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_op_new_email;
        break;
      }
      
      // optional bytes op_new_email = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_new_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_op_new_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_su_op_user_id;
        break;
      }
      
      // optional uint32 su_op_user_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_su_op_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &su_op_user_id_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_op_code_type;
        break;
      }
      
      // optional int32 op_code_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_code_type_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bind_DES-PWE_uid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bind_DES-PWE_uid(), output);
  }
  
  // optional bytes bind_DES-PWE_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bind_DES-PWE_key(), output);
  }
  
  // optional bytes email = 6;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->email(), output);
  }
  
  // optional string mobile = 7;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mobile(), output);
  }
  
  // optional uint32 register_time = 8;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->register_time(), output);
  }
  
  // optional uint32 op_code_set_time = 9;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->op_code_set_time(), output);
  }
  
  // optional string op_code_val = 10;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->op_code_val().data(), this->op_code_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->op_code_val(), output);
  }
  
  // optional uint32 op_check_expire_time = 11;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->op_check_expire_time(), output);
  }
  
  // optional bytes op_new_email = 12;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->op_new_email(), output);
  }
  
  // optional uint32 su_op_user_id = 14;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->su_op_user_id(), output);
  }
  
  // optional int32 op_code_type = 15;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->op_code_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bind_DES-PWE_uid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bind_DES-PWE_uid(), target);
  }
  
  // optional bytes bind_DES-PWE_key = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bind_DES-PWE_key(), target);
  }
  
  // optional bytes email = 6;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->email(), target);
  }
  
  // optional string mobile = 7;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mobile(), target);
  }
  
  // optional uint32 register_time = 8;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->register_time(), target);
  }
  
  // optional uint32 op_code_set_time = 9;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->op_code_set_time(), target);
  }
  
  // optional string op_code_val = 10;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->op_code_val().data(), this->op_code_val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->op_code_val(), target);
  }
  
  // optional uint32 op_check_expire_time = 11;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->op_check_expire_time(), target);
  }
  
  // optional bytes op_new_email = 12;
  if (_has_bit(8)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->op_new_email(), target);
  }
  
  // optional uint32 su_op_user_id = 14;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->su_op_user_id(), target);
  }
  
  // optional int32 op_code_type = 15;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->op_code_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSessionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bind_DES-PWE_uid = 1;
    if (has_bind_DES-PWE_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_DES-PWE_uid());
    }
    
    // optional bytes bind_DES-PWE_key = 2;
    if (has_bind_DES-PWE_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bind_DES-PWE_key());
    }
    
    // optional bytes email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }
    
    // optional string mobile = 7;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }
    
    // optional uint32 register_time = 8;
    if (has_register_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->register_time());
    }
    
    // optional uint32 op_code_set_time = 9;
    if (has_op_code_set_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_code_set_time());
    }
    
    // optional string op_code_val = 10;
    if (has_op_code_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->op_code_val());
    }
    
    // optional uint32 op_check_expire_time = 11;
    if (has_op_check_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_check_expire_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes op_new_email = 12;
    if (has_op_new_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->op_new_email());
    }
    
    // optional uint32 su_op_user_id = 14;
    if (has_su_op_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->su_op_user_id());
    }
    
    // optional int32 op_code_type = 15;
    if (has_op_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_code_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSessionInfo::MergeFrom(const UserSessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bind_DES-PWE_uid(from.bind_DES-PWE_uid());
    }
    if (from._has_bit(1)) {
      set_bind_DES-PWE_key(from.bind_DES-PWE_key());
    }
    if (from._has_bit(2)) {
      set_email(from.email());
    }
    if (from._has_bit(3)) {
      set_mobile(from.mobile());
    }
    if (from._has_bit(4)) {
      set_register_time(from.register_time());
    }
    if (from._has_bit(5)) {
      set_op_code_set_time(from.op_code_set_time());
    }
    if (from._has_bit(6)) {
      set_op_code_val(from.op_code_val());
    }
    if (from._has_bit(7)) {
      set_op_check_expire_time(from.op_check_expire_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_op_new_email(from.op_new_email());
    }
    if (from._has_bit(9)) {
      set_su_op_user_id(from.su_op_user_id());
    }
    if (from._has_bit(10)) {
      set_op_code_type(from.op_code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSessionInfo::CopyFrom(const UserSessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSessionInfo::IsInitialized() const {
  
  return true;
}

void UserSessionInfo::Swap(UserSessionInfo* other) {
  if (other != this) {
    std::swap(bind_DES-PWE_uid_, other->bind_DES-PWE_uid_);
    std::swap(bind_DES-PWE_key_, other->bind_DES-PWE_key_);
    std::swap(email_, other->email_);
    std::swap(mobile_, other->mobile_);
    std::swap(register_time_, other->register_time_);
    std::swap(op_code_set_time_, other->op_code_set_time_);
    std::swap(op_code_val_, other->op_code_val_);
    std::swap(op_check_expire_time_, other->op_check_expire_time_);
    std::swap(op_new_email_, other->op_new_email_);
    std::swap(su_op_user_id_, other->su_op_user_id_);
    std::swap(op_code_type_, other->op_code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSessionInfo_descriptor_;
  metadata.reflection = UserSessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRemoteAppLogInfo::kNextCheckLogSpaceTimeFieldNumber;
const int UserRemoteAppLogInfo::kTotalAppLogSizeFieldNumber;
const int UserRemoteAppLogInfo::kTmpRemainAppCountFieldNumber;
const int UserRemoteAppLogInfo::kOldestLogFileAppIdFieldNumber;
const int UserRemoteAppLogInfo::kOldestLogFileTimeFieldNumber;
#endif  // !_MSC_VER

UserRemoteAppLogInfo::UserRemoteAppLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRemoteAppLogInfo::InitAsDefaultInstance() {
}

UserRemoteAppLogInfo::UserRemoteAppLogInfo(const UserRemoteAppLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRemoteAppLogInfo::SharedCtor() {
  _cached_size_ = 0;
  next_check_log_space_time_ = 0u;
  total_app_log_size_ = GOOGLE_ULONGLONG(0);
  tmp_remain_app_count_ = 0;
  oldest_log_file_app_id_ = 0;
  oldest_log_file_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRemoteAppLogInfo::~UserRemoteAppLogInfo() {
  SharedDtor();
}

void UserRemoteAppLogInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRemoteAppLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRemoteAppLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRemoteAppLogInfo_descriptor_;
}

const UserRemoteAppLogInfo& UserRemoteAppLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();  return *default_instance_;
}

UserRemoteAppLogInfo* UserRemoteAppLogInfo::default_instance_ = NULL;

UserRemoteAppLogInfo* UserRemoteAppLogInfo::New() const {
  return new UserRemoteAppLogInfo;
}

void UserRemoteAppLogInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    next_check_log_space_time_ = 0u;
    total_app_log_size_ = GOOGLE_ULONGLONG(0);
    tmp_remain_app_count_ = 0;
    oldest_log_file_app_id_ = 0;
    oldest_log_file_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRemoteAppLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 next_check_log_space_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_check_log_space_time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_app_log_size;
        break;
      }
      
      // optional uint64 total_app_log_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_app_log_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_app_log_size_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tmp_remain_app_count;
        break;
      }
      
      // optional int32 tmp_remain_app_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_remain_app_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmp_remain_app_count_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_oldest_log_file_app_id;
        break;
      }
      
      // optional int32 oldest_log_file_app_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldest_log_file_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldest_log_file_app_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oldest_log_file_time;
        break;
      }
      
      // optional uint32 oldest_log_file_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldest_log_file_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldest_log_file_time_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRemoteAppLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 next_check_log_space_time = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next_check_log_space_time(), output);
  }
  
  // optional uint64 total_app_log_size = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_app_log_size(), output);
  }
  
  // optional int32 tmp_remain_app_count = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tmp_remain_app_count(), output);
  }
  
  // optional int32 oldest_log_file_app_id = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->oldest_log_file_app_id(), output);
  }
  
  // optional uint32 oldest_log_file_time = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oldest_log_file_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRemoteAppLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 next_check_log_space_time = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next_check_log_space_time(), target);
  }
  
  // optional uint64 total_app_log_size = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_app_log_size(), target);
  }
  
  // optional int32 tmp_remain_app_count = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tmp_remain_app_count(), target);
  }
  
  // optional int32 oldest_log_file_app_id = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->oldest_log_file_app_id(), target);
  }
  
  // optional uint32 oldest_log_file_time = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->oldest_log_file_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRemoteAppLogInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 next_check_log_space_time = 2;
    if (has_next_check_log_space_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_check_log_space_time());
    }
    
    // optional uint64 total_app_log_size = 3;
    if (has_total_app_log_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_app_log_size());
    }
    
    // optional int32 tmp_remain_app_count = 4;
    if (has_tmp_remain_app_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmp_remain_app_count());
    }
    
    // optional int32 oldest_log_file_app_id = 5;
    if (has_oldest_log_file_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldest_log_file_app_id());
    }
    
    // optional uint32 oldest_log_file_time = 6;
    if (has_oldest_log_file_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldest_log_file_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRemoteAppLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRemoteAppLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRemoteAppLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRemoteAppLogInfo::MergeFrom(const UserRemoteAppLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_next_check_log_space_time(from.next_check_log_space_time());
    }
    if (from._has_bit(1)) {
      set_total_app_log_size(from.total_app_log_size());
    }
    if (from._has_bit(2)) {
      set_tmp_remain_app_count(from.tmp_remain_app_count());
    }
    if (from._has_bit(3)) {
      set_oldest_log_file_app_id(from.oldest_log_file_app_id());
    }
    if (from._has_bit(4)) {
      set_oldest_log_file_time(from.oldest_log_file_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRemoteAppLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRemoteAppLogInfo::CopyFrom(const UserRemoteAppLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRemoteAppLogInfo::IsInitialized() const {
  
  return true;
}

void UserRemoteAppLogInfo::Swap(UserRemoteAppLogInfo* other) {
  if (other != this) {
    std::swap(next_check_log_space_time_, other->next_check_log_space_time_);
    std::swap(total_app_log_size_, other->total_app_log_size_);
    std::swap(tmp_remain_app_count_, other->tmp_remain_app_count_);
    std::swap(oldest_log_file_app_id_, other->oldest_log_file_app_id_);
    std::swap(oldest_log_file_time_, other->oldest_log_file_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRemoteAppLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRemoteAppLogInfo_descriptor_;
  metadata.reflection = UserRemoteAppLogInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MainPagePluginTables::kPluginIdFieldNumber;
const int MainPagePluginTables::kTableIdListFieldNumber;
#endif  // !_MSC_VER

MainPagePluginTables::MainPagePluginTables()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MainPagePluginTables::InitAsDefaultInstance() {
}

MainPagePluginTables::MainPagePluginTables(const MainPagePluginTables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MainPagePluginTables::SharedCtor() {
  _cached_size_ = 0;
  plugin_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainPagePluginTables::~MainPagePluginTables() {
  SharedDtor();
}

void MainPagePluginTables::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainPagePluginTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainPagePluginTables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainPagePluginTables_descriptor_;
}

const MainPagePluginTables& MainPagePluginTables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();  return *default_instance_;
}

MainPagePluginTables* MainPagePluginTables::default_instance_ = NULL;

MainPagePluginTables* MainPagePluginTables::New() const {
  return new MainPagePluginTables;
}

void MainPagePluginTables::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plugin_id_ = 0u;
  }
  table_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainPagePluginTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 plugin_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugin_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id_list;
        break;
      }
      
      // repeated uint32 table_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_table_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_table_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MainPagePluginTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 plugin_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plugin_id(), output);
  }
  
  // repeated uint32 table_id_list = 2;
  for (int i = 0; i < this->table_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->table_id_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MainPagePluginTables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 plugin_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plugin_id(), target);
  }
  
  // repeated uint32 table_id_list = 2;
  for (int i = 0; i < this->table_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->table_id_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MainPagePluginTables::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 plugin_id = 1;
    if (has_plugin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plugin_id());
    }
    
  }
  // repeated uint32 table_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->table_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->table_id_list(i));
    }
    total_size += 1 * this->table_id_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainPagePluginTables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainPagePluginTables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainPagePluginTables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainPagePluginTables::MergeFrom(const MainPagePluginTables& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_id_list_.MergeFrom(from.table_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_plugin_id(from.plugin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainPagePluginTables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainPagePluginTables::CopyFrom(const MainPagePluginTables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainPagePluginTables::IsInitialized() const {
  
  return true;
}

void MainPagePluginTables::Swap(MainPagePluginTables* other) {
  if (other != this) {
    std::swap(plugin_id_, other->plugin_id_);
    table_id_list_.Swap(&other->table_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainPagePluginTables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainPagePluginTables_descriptor_;
  metadata.reflection = MainPagePluginTables_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SystemOtherInfo::_default_str_version_info_;
const ::std::string SystemOtherInfo::_default_cust_cloud_url_;
#ifndef _MSC_VER
const int SystemOtherInfo::kMainPluginTablesFieldNumber;
const int SystemOtherInfo::kStrVersionInfoFieldNumber;
const int SystemOtherInfo::kCustCloudUrlFieldNumber;
#endif  // !_MSC_VER

SystemOtherInfo::SystemOtherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemOtherInfo::InitAsDefaultInstance() {
}

SystemOtherInfo::SystemOtherInfo(const SystemOtherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemOtherInfo::SharedCtor() {
  _cached_size_ = 0;
  str_version_info_ = const_cast< ::std::string*>(&_default_str_version_info_);
  cust_cloud_url_ = const_cast< ::std::string*>(&_default_cust_cloud_url_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemOtherInfo::~SystemOtherInfo() {
  SharedDtor();
}

void SystemOtherInfo::SharedDtor() {
  if (str_version_info_ != &_default_str_version_info_) {
    delete str_version_info_;
  }
  if (cust_cloud_url_ != &_default_cust_cloud_url_) {
    delete cust_cloud_url_;
  }
  if (this != default_instance_) {
  }
}

void SystemOtherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemOtherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemOtherInfo_descriptor_;
}

const SystemOtherInfo& SystemOtherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();  return *default_instance_;
}

SystemOtherInfo* SystemOtherInfo::default_instance_ = NULL;

SystemOtherInfo* SystemOtherInfo::New() const {
  return new SystemOtherInfo;
}

void SystemOtherInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (str_version_info_ != &_default_str_version_info_) {
        str_version_info_->clear();
      }
    }
    if (_has_bit(2)) {
      if (cust_cloud_url_ != &_default_cust_cloud_url_) {
        cust_cloud_url_->clear();
      }
    }
  }
  main_plugin_tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemOtherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .user.MainPagePluginTables main_plugin_tables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_plugin_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_main_plugin_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_main_plugin_tables;
        if (input->ExpectTag(18)) goto parse_str_version_info;
        break;
      }
      
      // optional bytes str_version_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_version_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_version_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cust_cloud_url;
        break;
      }
      
      // optional bytes cust_cloud_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cust_cloud_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cust_cloud_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemOtherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .user.MainPagePluginTables main_plugin_tables = 1;
  for (int i = 0; i < this->main_plugin_tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->main_plugin_tables(i), output);
  }
  
  // optional bytes str_version_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->str_version_info(), output);
  }
  
  // optional bytes cust_cloud_url = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cust_cloud_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemOtherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .user.MainPagePluginTables main_plugin_tables = 1;
  for (int i = 0; i < this->main_plugin_tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->main_plugin_tables(i), target);
  }
  
  // optional bytes str_version_info = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str_version_info(), target);
  }
  
  // optional bytes cust_cloud_url = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cust_cloud_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemOtherInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes str_version_info = 2;
    if (has_str_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_version_info());
    }
    
    // optional bytes cust_cloud_url = 3;
    if (has_cust_cloud_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cust_cloud_url());
    }
    
  }
  // repeated .user.MainPagePluginTables main_plugin_tables = 1;
  total_size += 1 * this->main_plugin_tables_size();
  for (int i = 0; i < this->main_plugin_tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->main_plugin_tables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemOtherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemOtherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemOtherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemOtherInfo::MergeFrom(const SystemOtherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  main_plugin_tables_.MergeFrom(from.main_plugin_tables_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_str_version_info(from.str_version_info());
    }
    if (from._has_bit(2)) {
      set_cust_cloud_url(from.cust_cloud_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemOtherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemOtherInfo::CopyFrom(const SystemOtherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemOtherInfo::IsInitialized() const {
  
  return true;
}

void SystemOtherInfo::Swap(SystemOtherInfo* other) {
  if (other != this) {
    main_plugin_tables_.Swap(&other->main_plugin_tables_);
    std::swap(str_version_info_, other->str_version_info_);
    std::swap(cust_cloud_url_, other->cust_cloud_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemOtherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemOtherInfo_descriptor_;
  metadata.reflection = SystemOtherInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

// @@protoc_insertion_point(global_scope)
