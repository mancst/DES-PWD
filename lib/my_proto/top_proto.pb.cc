// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "top_proto.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace top {

namespace {

const ::google::protobuf::Descriptor* SlogLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlogLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlogClientPkgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlogClientPkgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlogGetAppLogSizeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlogGetAppLogSizeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppLogSizeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppLogSizeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlogGetAppLogSizeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlogGetAppLogSizeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlogRemoveAppLogFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlogRemoveAppLogFile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_top_5fproto_2eproto() {
  protobuf_AddDesc_top_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "top_proto.proto");
  GOOGLE_CHECK(file != NULL);
  SlogLogInfo_descriptor_ = file->message_type(0);
  static const int SlogLogInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint64_log_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_log_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, bytes_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_log_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_log_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_cust_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, uint32_cust_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, int32_cust_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, int32_cust_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, bytes_cust_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, bytes_cust_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, cust_flag_),
  };
  SlogLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlogLogInfo_descriptor_,
      SlogLogInfo::default_instance_,
      SlogLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlogLogInfo));
  SlogClientPkgBody_descriptor_ = file->message_type(1);
  static const int SlogClientPkgBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogClientPkgBody, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogClientPkgBody, uint32_app_id_),
  };
  SlogClientPkgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlogClientPkgBody_descriptor_,
      SlogClientPkgBody::default_instance_,
      SlogClientPkgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogClientPkgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogClientPkgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlogClientPkgBody));
  SlogGetAppLogSizeReq_descriptor_ = file->message_type(2);
  static const int SlogGetAppLogSizeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeReq, appid_list_),
  };
  SlogGetAppLogSizeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlogGetAppLogSizeReq_descriptor_,
      SlogGetAppLogSizeReq::default_instance_,
      SlogGetAppLogSizeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlogGetAppLogSizeReq));
  AppLogSizeInfo_descriptor_ = file->message_type(3);
  static const int AppLogSizeInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, log_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, oldest_log_file_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, debug_logs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, info_logs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, warn_logs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, reqerr_logs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, error_logs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, fatal_logs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, other_logs_count_),
  };
  AppLogSizeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppLogSizeInfo_descriptor_,
      AppLogSizeInfo::default_instance_,
      AppLogSizeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogSizeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppLogSizeInfo));
  SlogGetAppLogSizeRsp_descriptor_ = file->message_type(4);
  static const int SlogGetAppLogSizeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeRsp, master_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeRsp, app_log_size_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeRsp, req_app_count_),
  };
  SlogGetAppLogSizeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlogGetAppLogSizeRsp_descriptor_,
      SlogGetAppLogSizeRsp::default_instance_,
      SlogGetAppLogSizeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogGetAppLogSizeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlogGetAppLogSizeRsp));
  SlogRemoveAppLogFile_descriptor_ = file->message_type(5);
  static const int SlogRemoveAppLogFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogRemoveAppLogFile, master_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogRemoveAppLogFile, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogRemoveAppLogFile, app_log_file_time_),
  };
  SlogRemoveAppLogFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlogRemoveAppLogFile_descriptor_,
      SlogRemoveAppLogFile::default_instance_,
      SlogRemoveAppLogFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogRemoveAppLogFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlogRemoveAppLogFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlogRemoveAppLogFile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_top_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlogLogInfo_descriptor_, &SlogLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlogClientPkgBody_descriptor_, &SlogClientPkgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlogGetAppLogSizeReq_descriptor_, &SlogGetAppLogSizeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppLogSizeInfo_descriptor_, &AppLogSizeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlogGetAppLogSizeRsp_descriptor_, &SlogGetAppLogSizeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlogRemoveAppLogFile_descriptor_, &SlogRemoveAppLogFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_top_5fproto_2eproto() {
  delete SlogLogInfo::default_instance_;
  delete SlogLogInfo_reflection_;
  delete SlogClientPkgBody::default_instance_;
  delete SlogClientPkgBody_reflection_;
  delete SlogGetAppLogSizeReq::default_instance_;
  delete SlogGetAppLogSizeReq_reflection_;
  delete AppLogSizeInfo::default_instance_;
  delete AppLogSizeInfo_reflection_;
  delete SlogGetAppLogSizeRsp::default_instance_;
  delete SlogGetAppLogSizeRsp_reflection_;
  delete SlogRemoveAppLogFile::default_instance_;
  delete SlogRemoveAppLogFile_reflection_;
}

void protobuf_AddDesc_top_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comm::protobuf_AddDesc_comm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017top_proto.proto\022\003top\032\ncomm.proto\"\353\002\n\013S"
    "logLogInfo\022\025\n\ruint32_app_id\030\001 \002(\r\022\030\n\020uin"
    "t32_module_id\030\002 \002(\r\022\027\n\017uint64_log_time\030\003"
    " \001(\004\022\026\n\016uint32_log_seq\030\004 \001(\r\022\027\n\017uint32_l"
    "og_type\030\005 \002(\r\022\021\n\tbytes_log\030\006 \002(\014\022\034\n\024uint"
    "32_log_config_id\030\007 \001(\r\022\027\n\017uint32_log_hos"
    "t\030\010 \001(\r\022\025\n\ruint32_cust_1\030\t \001(\r\022\025\n\ruint32"
    "_cust_2\030\n \001(\r\022\024\n\014int32_cust_3\030\013 \001(\005\022\024\n\014i"
    "nt32_cust_4\030\014 \001(\005\022\024\n\014bytes_cust_5\030\r \001(\014\022"
    "\024\n\014bytes_cust_6\030\016 \001(\014\022\021\n\tcust_flag\030\017 \001(\r"
    "\"I\n\021SlogClientPkgBody\022\035\n\003log\030\001 \003(\0132\020.top"
    ".SlogLogInfo\022\025\n\ruint32_app_id\030\002 \001(\r\"*\n\024S"
    "logGetAppLogSizeReq\022\022\n\nappid_list\030\002 \003(\005\""
    "\204\002\n\016AppLogSizeInfo\022\r\n\005appid\030\001 \001(\005\022\020\n\010log"
    "_size\030\002 \001(\004\022\034\n\024oldest_log_file_time\030\003 \001("
    "\r\022\030\n\020debug_logs_count\030\004 \001(\r\022\027\n\017info_logs"
    "_count\030\005 \001(\r\022\027\n\017warn_logs_count\030\006 \001(\r\022\031\n"
    "\021reqerr_logs_count\030\007 \001(\r\022\030\n\020error_logs_c"
    "ount\030\010 \001(\r\022\030\n\020fatal_logs_count\030\t \001(\r\022\030\n\020"
    "other_logs_count\030\n \001(\r\"u\n\024SlogGetAppLogS"
    "izeRsp\022\026\n\016master_user_id\030\001 \001(\r\022.\n\021app_lo"
    "g_size_info\030\002 \003(\0132\023.top.AppLogSizeInfo\022\025"
    "\n\rreq_app_count\030\003 \001(\005\"Y\n\024SlogRemoveAppLo"
    "gFile\022\026\n\016master_user_id\030\001 \001(\r\022\016\n\006app_id\030"
    "\002 \001(\005\022\031\n\021app_log_file_time\030\003 \001(\r", 992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "top_proto.proto", &protobuf_RegisterTypes);
  SlogLogInfo::default_instance_ = new SlogLogInfo();
  SlogClientPkgBody::default_instance_ = new SlogClientPkgBody();
  SlogGetAppLogSizeReq::default_instance_ = new SlogGetAppLogSizeReq();
  AppLogSizeInfo::default_instance_ = new AppLogSizeInfo();
  SlogGetAppLogSizeRsp::default_instance_ = new SlogGetAppLogSizeRsp();
  SlogRemoveAppLogFile::default_instance_ = new SlogRemoveAppLogFile();
  SlogLogInfo::default_instance_->InitAsDefaultInstance();
  SlogClientPkgBody::default_instance_->InitAsDefaultInstance();
  SlogGetAppLogSizeReq::default_instance_->InitAsDefaultInstance();
  AppLogSizeInfo::default_instance_->InitAsDefaultInstance();
  SlogGetAppLogSizeRsp::default_instance_->InitAsDefaultInstance();
  SlogRemoveAppLogFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_top_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_top_5fproto_2eproto {
  StaticDescriptorInitializer_top_5fproto_2eproto() {
    protobuf_AddDesc_top_5fproto_2eproto();
  }
} static_descriptor_initializer_top_5fproto_2eproto_;


// ===================================================================

const ::std::string SlogLogInfo::_default_bytes_log_;
const ::std::string SlogLogInfo::_default_bytes_cust_5_;
const ::std::string SlogLogInfo::_default_bytes_cust_6_;
#ifndef _MSC_VER
const int SlogLogInfo::kUint32AppIdFieldNumber;
const int SlogLogInfo::kUint32ModuleIdFieldNumber;
const int SlogLogInfo::kUint64LogTimeFieldNumber;
const int SlogLogInfo::kUint32LogSeqFieldNumber;
const int SlogLogInfo::kUint32LogTypeFieldNumber;
const int SlogLogInfo::kBytesLogFieldNumber;
const int SlogLogInfo::kUint32LogConfigIdFieldNumber;
const int SlogLogInfo::kUint32LogHostFieldNumber;
const int SlogLogInfo::kUint32Cust1FieldNumber;
const int SlogLogInfo::kUint32Cust2FieldNumber;
const int SlogLogInfo::kInt32Cust3FieldNumber;
const int SlogLogInfo::kInt32Cust4FieldNumber;
const int SlogLogInfo::kBytesCust5FieldNumber;
const int SlogLogInfo::kBytesCust6FieldNumber;
const int SlogLogInfo::kCustFlagFieldNumber;
#endif  // !_MSC_VER

SlogLogInfo::SlogLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlogLogInfo::InitAsDefaultInstance() {
}

SlogLogInfo::SlogLogInfo(const SlogLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlogLogInfo::SharedCtor() {
  _cached_size_ = 0;
  uint32_app_id_ = 0u;
  uint32_module_id_ = 0u;
  uint64_log_time_ = GOOGLE_ULONGLONG(0);
  uint32_log_seq_ = 0u;
  uint32_log_type_ = 0u;
  bytes_log_ = const_cast< ::std::string*>(&_default_bytes_log_);
  uint32_log_config_id_ = 0u;
  uint32_log_host_ = 0u;
  uint32_cust_1_ = 0u;
  uint32_cust_2_ = 0u;
  int32_cust_3_ = 0;
  int32_cust_4_ = 0;
  bytes_cust_5_ = const_cast< ::std::string*>(&_default_bytes_cust_5_);
  bytes_cust_6_ = const_cast< ::std::string*>(&_default_bytes_cust_6_);
  cust_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlogLogInfo::~SlogLogInfo() {
  SharedDtor();
}

void SlogLogInfo::SharedDtor() {
  if (bytes_log_ != &_default_bytes_log_) {
    delete bytes_log_;
  }
  if (bytes_cust_5_ != &_default_bytes_cust_5_) {
    delete bytes_cust_5_;
  }
  if (bytes_cust_6_ != &_default_bytes_cust_6_) {
    delete bytes_cust_6_;
  }
  if (this != default_instance_) {
  }
}

void SlogLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlogLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlogLogInfo_descriptor_;
}

const SlogLogInfo& SlogLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_top_5fproto_2eproto();  return *default_instance_;
}

SlogLogInfo* SlogLogInfo::default_instance_ = NULL;

SlogLogInfo* SlogLogInfo::New() const {
  return new SlogLogInfo;
}

void SlogLogInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_app_id_ = 0u;
    uint32_module_id_ = 0u;
    uint64_log_time_ = GOOGLE_ULONGLONG(0);
    uint32_log_seq_ = 0u;
    uint32_log_type_ = 0u;
    if (_has_bit(5)) {
      if (bytes_log_ != &_default_bytes_log_) {
        bytes_log_->clear();
      }
    }
    uint32_log_config_id_ = 0u;
    uint32_log_host_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uint32_cust_1_ = 0u;
    uint32_cust_2_ = 0u;
    int32_cust_3_ = 0;
    int32_cust_4_ = 0;
    if (_has_bit(12)) {
      if (bytes_cust_5_ != &_default_bytes_cust_5_) {
        bytes_cust_5_->clear();
      }
    }
    if (_has_bit(13)) {
      if (bytes_cust_6_ != &_default_bytes_cust_6_) {
        bytes_cust_6_->clear();
      }
    }
    cust_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlogLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uint32_app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_app_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_module_id;
        break;
      }
      
      // required uint32 uint32_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_module_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint64_log_time;
        break;
      }
      
      // optional uint64 uint64_log_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_log_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint32_log_seq;
        break;
      }
      
      // optional uint32 uint32_log_seq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_log_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_log_seq_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint32_log_type;
        break;
      }
      
      // required uint32 uint32_log_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_log_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_log_type_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bytes_log;
        break;
      }
      
      // required bytes bytes_log = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uint32_log_config_id;
        break;
      }
      
      // optional uint32 uint32_log_config_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_log_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_log_config_id_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uint32_log_host;
        break;
      }
      
      // optional uint32 uint32_log_host = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_log_host:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_log_host_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uint32_cust_1;
        break;
      }
      
      // optional uint32 uint32_cust_1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_cust_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_cust_1_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_uint32_cust_2;
        break;
      }
      
      // optional uint32 uint32_cust_2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_cust_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_cust_2_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_int32_cust_3;
        break;
      }
      
      // optional int32 int32_cust_3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_cust_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_cust_3_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_int32_cust_4;
        break;
      }
      
      // optional int32 int32_cust_4 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_cust_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_cust_4_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_bytes_cust_5;
        break;
      }
      
      // optional bytes bytes_cust_5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_cust_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_cust_5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bytes_cust_6;
        break;
      }
      
      // optional bytes bytes_cust_6 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_cust_6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_cust_6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cust_flag;
        break;
      }
      
      // optional uint32 cust_flag = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cust_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cust_flag_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlogLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uint32_app_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_app_id(), output);
  }
  
  // required uint32 uint32_module_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_module_id(), output);
  }
  
  // optional uint64 uint64_log_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uint64_log_time(), output);
  }
  
  // optional uint32 uint32_log_seq = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32_log_seq(), output);
  }
  
  // required uint32 uint32_log_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_log_type(), output);
  }
  
  // required bytes bytes_log = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->bytes_log(), output);
  }
  
  // optional uint32 uint32_log_config_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uint32_log_config_id(), output);
  }
  
  // optional uint32 uint32_log_host = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uint32_log_host(), output);
  }
  
  // optional uint32 uint32_cust_1 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uint32_cust_1(), output);
  }
  
  // optional uint32 uint32_cust_2 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uint32_cust_2(), output);
  }
  
  // optional int32 int32_cust_3 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->int32_cust_3(), output);
  }
  
  // optional int32 int32_cust_4 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->int32_cust_4(), output);
  }
  
  // optional bytes bytes_cust_5 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->bytes_cust_5(), output);
  }
  
  // optional bytes bytes_cust_6 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->bytes_cust_6(), output);
  }
  
  // optional uint32 cust_flag = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->cust_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlogLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uint32_app_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_app_id(), target);
  }
  
  // required uint32 uint32_module_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_module_id(), target);
  }
  
  // optional uint64 uint64_log_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uint64_log_time(), target);
  }
  
  // optional uint32 uint32_log_seq = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32_log_seq(), target);
  }
  
  // required uint32 uint32_log_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_log_type(), target);
  }
  
  // required bytes bytes_log = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->bytes_log(), target);
  }
  
  // optional uint32 uint32_log_config_id = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uint32_log_config_id(), target);
  }
  
  // optional uint32 uint32_log_host = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uint32_log_host(), target);
  }
  
  // optional uint32 uint32_cust_1 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uint32_cust_1(), target);
  }
  
  // optional uint32 uint32_cust_2 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uint32_cust_2(), target);
  }
  
  // optional int32 int32_cust_3 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->int32_cust_3(), target);
  }
  
  // optional int32 int32_cust_4 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->int32_cust_4(), target);
  }
  
  // optional bytes bytes_cust_5 = 13;
  if (_has_bit(12)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->bytes_cust_5(), target);
  }
  
  // optional bytes bytes_cust_6 = 14;
  if (_has_bit(13)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->bytes_cust_6(), target);
  }
  
  // optional uint32 cust_flag = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->cust_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlogLogInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uint32_app_id = 1;
    if (has_uint32_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_app_id());
    }
    
    // required uint32 uint32_module_id = 2;
    if (has_uint32_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_module_id());
    }
    
    // optional uint64 uint64_log_time = 3;
    if (has_uint64_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_log_time());
    }
    
    // optional uint32 uint32_log_seq = 4;
    if (has_uint32_log_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_log_seq());
    }
    
    // required uint32 uint32_log_type = 5;
    if (has_uint32_log_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_log_type());
    }
    
    // required bytes bytes_log = 6;
    if (has_bytes_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_log());
    }
    
    // optional uint32 uint32_log_config_id = 7;
    if (has_uint32_log_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_log_config_id());
    }
    
    // optional uint32 uint32_log_host = 8;
    if (has_uint32_log_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_log_host());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 uint32_cust_1 = 9;
    if (has_uint32_cust_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_cust_1());
    }
    
    // optional uint32 uint32_cust_2 = 10;
    if (has_uint32_cust_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_cust_2());
    }
    
    // optional int32 int32_cust_3 = 11;
    if (has_int32_cust_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_cust_3());
    }
    
    // optional int32 int32_cust_4 = 12;
    if (has_int32_cust_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_cust_4());
    }
    
    // optional bytes bytes_cust_5 = 13;
    if (has_bytes_cust_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_cust_5());
    }
    
    // optional bytes bytes_cust_6 = 14;
    if (has_bytes_cust_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_cust_6());
    }
    
    // optional uint32 cust_flag = 15;
    if (has_cust_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cust_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlogLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlogLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlogLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlogLogInfo::MergeFrom(const SlogLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uint32_app_id(from.uint32_app_id());
    }
    if (from._has_bit(1)) {
      set_uint32_module_id(from.uint32_module_id());
    }
    if (from._has_bit(2)) {
      set_uint64_log_time(from.uint64_log_time());
    }
    if (from._has_bit(3)) {
      set_uint32_log_seq(from.uint32_log_seq());
    }
    if (from._has_bit(4)) {
      set_uint32_log_type(from.uint32_log_type());
    }
    if (from._has_bit(5)) {
      set_bytes_log(from.bytes_log());
    }
    if (from._has_bit(6)) {
      set_uint32_log_config_id(from.uint32_log_config_id());
    }
    if (from._has_bit(7)) {
      set_uint32_log_host(from.uint32_log_host());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_uint32_cust_1(from.uint32_cust_1());
    }
    if (from._has_bit(9)) {
      set_uint32_cust_2(from.uint32_cust_2());
    }
    if (from._has_bit(10)) {
      set_int32_cust_3(from.int32_cust_3());
    }
    if (from._has_bit(11)) {
      set_int32_cust_4(from.int32_cust_4());
    }
    if (from._has_bit(12)) {
      set_bytes_cust_5(from.bytes_cust_5());
    }
    if (from._has_bit(13)) {
      set_bytes_cust_6(from.bytes_cust_6());
    }
    if (from._has_bit(14)) {
      set_cust_flag(from.cust_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlogLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlogLogInfo::CopyFrom(const SlogLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlogLogInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;
  
  return true;
}

void SlogLogInfo::Swap(SlogLogInfo* other) {
  if (other != this) {
    std::swap(uint32_app_id_, other->uint32_app_id_);
    std::swap(uint32_module_id_, other->uint32_module_id_);
    std::swap(uint64_log_time_, other->uint64_log_time_);
    std::swap(uint32_log_seq_, other->uint32_log_seq_);
    std::swap(uint32_log_type_, other->uint32_log_type_);
    std::swap(bytes_log_, other->bytes_log_);
    std::swap(uint32_log_config_id_, other->uint32_log_config_id_);
    std::swap(uint32_log_host_, other->uint32_log_host_);
    std::swap(uint32_cust_1_, other->uint32_cust_1_);
    std::swap(uint32_cust_2_, other->uint32_cust_2_);
    std::swap(int32_cust_3_, other->int32_cust_3_);
    std::swap(int32_cust_4_, other->int32_cust_4_);
    std::swap(bytes_cust_5_, other->bytes_cust_5_);
    std::swap(bytes_cust_6_, other->bytes_cust_6_);
    std::swap(cust_flag_, other->cust_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlogLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlogLogInfo_descriptor_;
  metadata.reflection = SlogLogInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlogClientPkgBody::kLogFieldNumber;
const int SlogClientPkgBody::kUint32AppIdFieldNumber;
#endif  // !_MSC_VER

SlogClientPkgBody::SlogClientPkgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlogClientPkgBody::InitAsDefaultInstance() {
}

SlogClientPkgBody::SlogClientPkgBody(const SlogClientPkgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlogClientPkgBody::SharedCtor() {
  _cached_size_ = 0;
  uint32_app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlogClientPkgBody::~SlogClientPkgBody() {
  SharedDtor();
}

void SlogClientPkgBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlogClientPkgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlogClientPkgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlogClientPkgBody_descriptor_;
}

const SlogClientPkgBody& SlogClientPkgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_top_5fproto_2eproto();  return *default_instance_;
}

SlogClientPkgBody* SlogClientPkgBody::default_instance_ = NULL;

SlogClientPkgBody* SlogClientPkgBody::New() const {
  return new SlogClientPkgBody;
}

void SlogClientPkgBody::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    uint32_app_id_ = 0u;
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlogClientPkgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .top.SlogLogInfo log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectTag(16)) goto parse_uint32_app_id;
        break;
      }
      
      // optional uint32 uint32_app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_app_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlogClientPkgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .top.SlogLogInfo log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }
  
  // optional uint32 uint32_app_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_app_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlogClientPkgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .top.SlogLogInfo log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }
  
  // optional uint32 uint32_app_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_app_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlogClientPkgBody::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 uint32_app_id = 2;
    if (has_uint32_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_app_id());
    }
    
  }
  // repeated .top.SlogLogInfo log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlogClientPkgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlogClientPkgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlogClientPkgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlogClientPkgBody::MergeFrom(const SlogClientPkgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_uint32_app_id(from.uint32_app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlogClientPkgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlogClientPkgBody::CopyFrom(const SlogClientPkgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlogClientPkgBody::IsInitialized() const {
  
  for (int i = 0; i < log_size(); i++) {
    if (!this->log(i).IsInitialized()) return false;
  }
  return true;
}

void SlogClientPkgBody::Swap(SlogClientPkgBody* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(uint32_app_id_, other->uint32_app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlogClientPkgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlogClientPkgBody_descriptor_;
  metadata.reflection = SlogClientPkgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlogGetAppLogSizeReq::kAppidListFieldNumber;
#endif  // !_MSC_VER

SlogGetAppLogSizeReq::SlogGetAppLogSizeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlogGetAppLogSizeReq::InitAsDefaultInstance() {
}

SlogGetAppLogSizeReq::SlogGetAppLogSizeReq(const SlogGetAppLogSizeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlogGetAppLogSizeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlogGetAppLogSizeReq::~SlogGetAppLogSizeReq() {
  SharedDtor();
}

void SlogGetAppLogSizeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlogGetAppLogSizeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlogGetAppLogSizeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlogGetAppLogSizeReq_descriptor_;
}

const SlogGetAppLogSizeReq& SlogGetAppLogSizeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_top_5fproto_2eproto();  return *default_instance_;
}

SlogGetAppLogSizeReq* SlogGetAppLogSizeReq::default_instance_ = NULL;

SlogGetAppLogSizeReq* SlogGetAppLogSizeReq::New() const {
  return new SlogGetAppLogSizeReq;
}

void SlogGetAppLogSizeReq::Clear() {
  appid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlogGetAppLogSizeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 appid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_appid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_appid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlogGetAppLogSizeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 appid_list = 2;
  for (int i = 0; i < this->appid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->appid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlogGetAppLogSizeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 appid_list = 2;
  for (int i = 0; i < this->appid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->appid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlogGetAppLogSizeReq::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 appid_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->appid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->appid_list(i));
    }
    total_size += 1 * this->appid_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlogGetAppLogSizeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlogGetAppLogSizeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlogGetAppLogSizeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlogGetAppLogSizeReq::MergeFrom(const SlogGetAppLogSizeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  appid_list_.MergeFrom(from.appid_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlogGetAppLogSizeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlogGetAppLogSizeReq::CopyFrom(const SlogGetAppLogSizeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlogGetAppLogSizeReq::IsInitialized() const {
  
  return true;
}

void SlogGetAppLogSizeReq::Swap(SlogGetAppLogSizeReq* other) {
  if (other != this) {
    appid_list_.Swap(&other->appid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlogGetAppLogSizeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlogGetAppLogSizeReq_descriptor_;
  metadata.reflection = SlogGetAppLogSizeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppLogSizeInfo::kAppidFieldNumber;
const int AppLogSizeInfo::kLogSizeFieldNumber;
const int AppLogSizeInfo::kOldestLogFileTimeFieldNumber;
const int AppLogSizeInfo::kDebugLogsCountFieldNumber;
const int AppLogSizeInfo::kInfoLogsCountFieldNumber;
const int AppLogSizeInfo::kWarnLogsCountFieldNumber;
const int AppLogSizeInfo::kReqerrLogsCountFieldNumber;
const int AppLogSizeInfo::kErrorLogsCountFieldNumber;
const int AppLogSizeInfo::kFatalLogsCountFieldNumber;
const int AppLogSizeInfo::kOtherLogsCountFieldNumber;
#endif  // !_MSC_VER

AppLogSizeInfo::AppLogSizeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppLogSizeInfo::InitAsDefaultInstance() {
}

AppLogSizeInfo::AppLogSizeInfo(const AppLogSizeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppLogSizeInfo::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0;
  log_size_ = GOOGLE_ULONGLONG(0);
  oldest_log_file_time_ = 0u;
  debug_logs_count_ = 0u;
  info_logs_count_ = 0u;
  warn_logs_count_ = 0u;
  reqerr_logs_count_ = 0u;
  error_logs_count_ = 0u;
  fatal_logs_count_ = 0u;
  other_logs_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppLogSizeInfo::~AppLogSizeInfo() {
  SharedDtor();
}

void AppLogSizeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppLogSizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppLogSizeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppLogSizeInfo_descriptor_;
}

const AppLogSizeInfo& AppLogSizeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_top_5fproto_2eproto();  return *default_instance_;
}

AppLogSizeInfo* AppLogSizeInfo::default_instance_ = NULL;

AppLogSizeInfo* AppLogSizeInfo::New() const {
  return new AppLogSizeInfo;
}

void AppLogSizeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0;
    log_size_ = GOOGLE_ULONGLONG(0);
    oldest_log_file_time_ = 0u;
    debug_logs_count_ = 0u;
    info_logs_count_ = 0u;
    warn_logs_count_ = 0u;
    reqerr_logs_count_ = 0u;
    error_logs_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fatal_logs_count_ = 0u;
    other_logs_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppLogSizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_log_size;
        break;
      }
      
      // optional uint64 log_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_size_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldest_log_file_time;
        break;
      }
      
      // optional uint32 oldest_log_file_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldest_log_file_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldest_log_file_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_debug_logs_count;
        break;
      }
      
      // optional uint32 debug_logs_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug_logs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_logs_count_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_info_logs_count;
        break;
      }
      
      // optional uint32 info_logs_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_logs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_logs_count_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_warn_logs_count;
        break;
      }
      
      // optional uint32 warn_logs_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warn_logs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warn_logs_count_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reqerr_logs_count;
        break;
      }
      
      // optional uint32 reqerr_logs_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqerr_logs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqerr_logs_count_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_error_logs_count;
        break;
      }
      
      // optional uint32 error_logs_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_logs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_logs_count_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fatal_logs_count;
        break;
      }
      
      // optional uint32 fatal_logs_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fatal_logs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fatal_logs_count_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_other_logs_count;
        break;
      }
      
      // optional uint32 other_logs_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_logs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_logs_count_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppLogSizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }
  
  // optional uint64 log_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->log_size(), output);
  }
  
  // optional uint32 oldest_log_file_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldest_log_file_time(), output);
  }
  
  // optional uint32 debug_logs_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->debug_logs_count(), output);
  }
  
  // optional uint32 info_logs_count = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->info_logs_count(), output);
  }
  
  // optional uint32 warn_logs_count = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->warn_logs_count(), output);
  }
  
  // optional uint32 reqerr_logs_count = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reqerr_logs_count(), output);
  }
  
  // optional uint32 error_logs_count = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->error_logs_count(), output);
  }
  
  // optional uint32 fatal_logs_count = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fatal_logs_count(), output);
  }
  
  // optional uint32 other_logs_count = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->other_logs_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppLogSizeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }
  
  // optional uint64 log_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->log_size(), target);
  }
  
  // optional uint32 oldest_log_file_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldest_log_file_time(), target);
  }
  
  // optional uint32 debug_logs_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->debug_logs_count(), target);
  }
  
  // optional uint32 info_logs_count = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->info_logs_count(), target);
  }
  
  // optional uint32 warn_logs_count = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->warn_logs_count(), target);
  }
  
  // optional uint32 reqerr_logs_count = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reqerr_logs_count(), target);
  }
  
  // optional uint32 error_logs_count = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->error_logs_count(), target);
  }
  
  // optional uint32 fatal_logs_count = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fatal_logs_count(), target);
  }
  
  // optional uint32 other_logs_count = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->other_logs_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppLogSizeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }
    
    // optional uint64 log_size = 2;
    if (has_log_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_size());
    }
    
    // optional uint32 oldest_log_file_time = 3;
    if (has_oldest_log_file_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldest_log_file_time());
    }
    
    // optional uint32 debug_logs_count = 4;
    if (has_debug_logs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_logs_count());
    }
    
    // optional uint32 info_logs_count = 5;
    if (has_info_logs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_logs_count());
    }
    
    // optional uint32 warn_logs_count = 6;
    if (has_warn_logs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warn_logs_count());
    }
    
    // optional uint32 reqerr_logs_count = 7;
    if (has_reqerr_logs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqerr_logs_count());
    }
    
    // optional uint32 error_logs_count = 8;
    if (has_error_logs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_logs_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fatal_logs_count = 9;
    if (has_fatal_logs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fatal_logs_count());
    }
    
    // optional uint32 other_logs_count = 10;
    if (has_other_logs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_logs_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppLogSizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppLogSizeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppLogSizeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppLogSizeInfo::MergeFrom(const AppLogSizeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_appid(from.appid());
    }
    if (from._has_bit(1)) {
      set_log_size(from.log_size());
    }
    if (from._has_bit(2)) {
      set_oldest_log_file_time(from.oldest_log_file_time());
    }
    if (from._has_bit(3)) {
      set_debug_logs_count(from.debug_logs_count());
    }
    if (from._has_bit(4)) {
      set_info_logs_count(from.info_logs_count());
    }
    if (from._has_bit(5)) {
      set_warn_logs_count(from.warn_logs_count());
    }
    if (from._has_bit(6)) {
      set_reqerr_logs_count(from.reqerr_logs_count());
    }
    if (from._has_bit(7)) {
      set_error_logs_count(from.error_logs_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_fatal_logs_count(from.fatal_logs_count());
    }
    if (from._has_bit(9)) {
      set_other_logs_count(from.other_logs_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppLogSizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppLogSizeInfo::CopyFrom(const AppLogSizeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppLogSizeInfo::IsInitialized() const {
  
  return true;
}

void AppLogSizeInfo::Swap(AppLogSizeInfo* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(log_size_, other->log_size_);
    std::swap(oldest_log_file_time_, other->oldest_log_file_time_);
    std::swap(debug_logs_count_, other->debug_logs_count_);
    std::swap(info_logs_count_, other->info_logs_count_);
    std::swap(warn_logs_count_, other->warn_logs_count_);
    std::swap(reqerr_logs_count_, other->reqerr_logs_count_);
    std::swap(error_logs_count_, other->error_logs_count_);
    std::swap(fatal_logs_count_, other->fatal_logs_count_);
    std::swap(other_logs_count_, other->other_logs_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppLogSizeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppLogSizeInfo_descriptor_;
  metadata.reflection = AppLogSizeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlogGetAppLogSizeRsp::kMasterUserIdFieldNumber;
const int SlogGetAppLogSizeRsp::kAppLogSizeInfoFieldNumber;
const int SlogGetAppLogSizeRsp::kReqAppCountFieldNumber;
#endif  // !_MSC_VER

SlogGetAppLogSizeRsp::SlogGetAppLogSizeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlogGetAppLogSizeRsp::InitAsDefaultInstance() {
}

SlogGetAppLogSizeRsp::SlogGetAppLogSizeRsp(const SlogGetAppLogSizeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlogGetAppLogSizeRsp::SharedCtor() {
  _cached_size_ = 0;
  master_user_id_ = 0u;
  req_app_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlogGetAppLogSizeRsp::~SlogGetAppLogSizeRsp() {
  SharedDtor();
}

void SlogGetAppLogSizeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlogGetAppLogSizeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlogGetAppLogSizeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlogGetAppLogSizeRsp_descriptor_;
}

const SlogGetAppLogSizeRsp& SlogGetAppLogSizeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_top_5fproto_2eproto();  return *default_instance_;
}

SlogGetAppLogSizeRsp* SlogGetAppLogSizeRsp::default_instance_ = NULL;

SlogGetAppLogSizeRsp* SlogGetAppLogSizeRsp::New() const {
  return new SlogGetAppLogSizeRsp;
}

void SlogGetAppLogSizeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_user_id_ = 0u;
    req_app_count_ = 0;
  }
  app_log_size_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlogGetAppLogSizeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 master_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_user_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_log_size_info;
        break;
      }
      
      // repeated .top.AppLogSizeInfo app_log_size_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_log_size_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_log_size_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_log_size_info;
        if (input->ExpectTag(24)) goto parse_req_app_count;
        break;
      }
      
      // optional int32 req_app_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_app_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_app_count_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlogGetAppLogSizeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 master_user_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_user_id(), output);
  }
  
  // repeated .top.AppLogSizeInfo app_log_size_info = 2;
  for (int i = 0; i < this->app_log_size_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app_log_size_info(i), output);
  }
  
  // optional int32 req_app_count = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->req_app_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlogGetAppLogSizeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 master_user_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_user_id(), target);
  }
  
  // repeated .top.AppLogSizeInfo app_log_size_info = 2;
  for (int i = 0; i < this->app_log_size_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app_log_size_info(i), target);
  }
  
  // optional int32 req_app_count = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->req_app_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlogGetAppLogSizeRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 master_user_id = 1;
    if (has_master_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_user_id());
    }
    
    // optional int32 req_app_count = 3;
    if (has_req_app_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_app_count());
    }
    
  }
  // repeated .top.AppLogSizeInfo app_log_size_info = 2;
  total_size += 1 * this->app_log_size_info_size();
  for (int i = 0; i < this->app_log_size_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app_log_size_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlogGetAppLogSizeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlogGetAppLogSizeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlogGetAppLogSizeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlogGetAppLogSizeRsp::MergeFrom(const SlogGetAppLogSizeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  app_log_size_info_.MergeFrom(from.app_log_size_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_master_user_id(from.master_user_id());
    }
    if (from._has_bit(2)) {
      set_req_app_count(from.req_app_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlogGetAppLogSizeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlogGetAppLogSizeRsp::CopyFrom(const SlogGetAppLogSizeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlogGetAppLogSizeRsp::IsInitialized() const {
  
  return true;
}

void SlogGetAppLogSizeRsp::Swap(SlogGetAppLogSizeRsp* other) {
  if (other != this) {
    std::swap(master_user_id_, other->master_user_id_);
    app_log_size_info_.Swap(&other->app_log_size_info_);
    std::swap(req_app_count_, other->req_app_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlogGetAppLogSizeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlogGetAppLogSizeRsp_descriptor_;
  metadata.reflection = SlogGetAppLogSizeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlogRemoveAppLogFile::kMasterUserIdFieldNumber;
const int SlogRemoveAppLogFile::kAppIdFieldNumber;
const int SlogRemoveAppLogFile::kAppLogFileTimeFieldNumber;
#endif  // !_MSC_VER

SlogRemoveAppLogFile::SlogRemoveAppLogFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlogRemoveAppLogFile::InitAsDefaultInstance() {
}

SlogRemoveAppLogFile::SlogRemoveAppLogFile(const SlogRemoveAppLogFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlogRemoveAppLogFile::SharedCtor() {
  _cached_size_ = 0;
  master_user_id_ = 0u;
  app_id_ = 0;
  app_log_file_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlogRemoveAppLogFile::~SlogRemoveAppLogFile() {
  SharedDtor();
}

void SlogRemoveAppLogFile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlogRemoveAppLogFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlogRemoveAppLogFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlogRemoveAppLogFile_descriptor_;
}

const SlogRemoveAppLogFile& SlogRemoveAppLogFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_top_5fproto_2eproto();  return *default_instance_;
}

SlogRemoveAppLogFile* SlogRemoveAppLogFile::default_instance_ = NULL;

SlogRemoveAppLogFile* SlogRemoveAppLogFile::New() const {
  return new SlogRemoveAppLogFile;
}

void SlogRemoveAppLogFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_user_id_ = 0u;
    app_id_ = 0;
    app_log_file_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlogRemoveAppLogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 master_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_user_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }
      
      // optional int32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_log_file_time;
        break;
      }
      
      // optional uint32 app_log_file_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_log_file_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_log_file_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlogRemoveAppLogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 master_user_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_user_id(), output);
  }
  
  // optional int32 app_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->app_id(), output);
  }
  
  // optional uint32 app_log_file_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_log_file_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlogRemoveAppLogFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 master_user_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_user_id(), target);
  }
  
  // optional int32 app_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->app_id(), target);
  }
  
  // optional uint32 app_log_file_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_log_file_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlogRemoveAppLogFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 master_user_id = 1;
    if (has_master_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_user_id());
    }
    
    // optional int32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }
    
    // optional uint32 app_log_file_time = 3;
    if (has_app_log_file_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_log_file_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlogRemoveAppLogFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlogRemoveAppLogFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlogRemoveAppLogFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlogRemoveAppLogFile::MergeFrom(const SlogRemoveAppLogFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_master_user_id(from.master_user_id());
    }
    if (from._has_bit(1)) {
      set_app_id(from.app_id());
    }
    if (from._has_bit(2)) {
      set_app_log_file_time(from.app_log_file_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlogRemoveAppLogFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlogRemoveAppLogFile::CopyFrom(const SlogRemoveAppLogFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlogRemoveAppLogFile::IsInitialized() const {
  
  return true;
}

void SlogRemoveAppLogFile::Swap(SlogRemoveAppLogFile* other) {
  if (other != this) {
    std::swap(master_user_id_, other->master_user_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(app_log_file_time_, other->app_log_file_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlogRemoveAppLogFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlogRemoveAppLogFile_descriptor_;
  metadata.reflection = SlogRemoveAppLogFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace top

// @@protoc_insertion_point(global_scope)
