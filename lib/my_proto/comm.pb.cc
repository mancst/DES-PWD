// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* PkgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportAppLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAppLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendEmailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendEmailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendWarnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendWarnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickProcessToSlowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickProcessToSlowInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuickToSlowCmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  PkgHead_descriptor_ = file->message_type(0);
  static const int PkgHead_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, en_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, uint32_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, uint32_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, str_errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, echo_buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, uint32_magic_response_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, req_machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, reserved_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, reserved_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, reserved_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, str_reserved_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, str_reserved_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, str_reserved_3_),
  };
  PkgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkgHead_descriptor_,
      PkgHead::default_instance_,
      PkgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkgHead));
  HeartInfo_descriptor_ = file->message_type(1);
  static const int HeartInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, bytes_req_ip_),
  };
  HeartInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartInfo_descriptor_,
      HeartInfo::default_instance_,
      HeartInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartInfo));
  AttrInfo_descriptor_ = file->message_type(2);
  static const int AttrInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, uint32_attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, uint32_attr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, str_),
  };
  AttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrInfo_descriptor_,
      AttrInfo::default_instance_,
      AttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrInfo));
  ReportAttr_descriptor_ = file->message_type(3);
  static const int ReportAttr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAttr, uint32_client_rep_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAttr, bytes_report_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAttr, msg_attr_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAttr, report_host_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAttr, user_master_id_),
  };
  ReportAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAttr_descriptor_,
      ReportAttr::default_instance_,
      ReportAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAttr));
  AppLogInfo_descriptor_ = file->message_type(4);
  static const int AppLogInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, uint32_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, uint32_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, uint64_log_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, uint32_log_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, uint32_log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, bytes_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, bytes_report_ip_),
  };
  AppLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppLogInfo_descriptor_,
      AppLogInfo::default_instance_,
      AppLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppLogInfo));
  ReportAppLog_descriptor_ = file->message_type(5);
  static const int ReportAppLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAppLog, uint32_client_rep_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAppLog, bytes_report_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAppLog, log_),
  };
  ReportAppLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAppLog_descriptor_,
      ReportAppLog::default_instance_,
      ReportAppLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAppLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAppLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAppLog));
  SendEmailInfo_descriptor_ = file->message_type(6);
  static const int SendEmailInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendEmailInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendEmailInfo, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendEmailInfo, text_body_),
  };
  SendEmailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendEmailInfo_descriptor_,
      SendEmailInfo::default_instance_,
      SendEmailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendEmailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendEmailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendEmailInfo));
  SendWarnInfo_descriptor_ = file->message_type(7);
  static const int SendWarnInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, attr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, warn_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, warn_obj_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, warn_obj_type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, warn_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, warn_id_),
  };
  SendWarnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendWarnInfo_descriptor_,
      SendWarnInfo::default_instance_,
      SendWarnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWarnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendWarnInfo));
  QuickProcessToSlowInfo_descriptor_ = file->message_type(8);
  static const int QuickProcessToSlowInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickProcessToSlowInfo, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickProcessToSlowInfo, machine_last_attr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickProcessToSlowInfo, machine_last_log_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickProcessToSlowInfo, user_master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickProcessToSlowInfo, quick_to_slow_cmd_),
  };
  QuickProcessToSlowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickProcessToSlowInfo_descriptor_,
      QuickProcessToSlowInfo::default_instance_,
      QuickProcessToSlowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickProcessToSlowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickProcessToSlowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickProcessToSlowInfo));
  Command_descriptor_ = file->enum_type(0);
  QuickToSlowCmd_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkgHead_descriptor_, &PkgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartInfo_descriptor_, &HeartInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrInfo_descriptor_, &AttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAttr_descriptor_, &ReportAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppLogInfo_descriptor_, &AppLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAppLog_descriptor_, &ReportAppLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendEmailInfo_descriptor_, &SendEmailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendWarnInfo_descriptor_, &SendWarnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickProcessToSlowInfo_descriptor_, &QuickProcessToSlowInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete PkgHead::default_instance_;
  delete PkgHead_reflection_;
  delete HeartInfo::default_instance_;
  delete HeartInfo_reflection_;
  delete AttrInfo::default_instance_;
  delete AttrInfo_reflection_;
  delete ReportAttr::default_instance_;
  delete ReportAttr_reflection_;
  delete AppLogInfo::default_instance_;
  delete AppLogInfo_reflection_;
  delete ReportAppLog::default_instance_;
  delete ReportAppLog_reflection_;
  delete SendEmailInfo::default_instance_;
  delete SendEmailInfo_reflection_;
  delete SendWarnInfo::default_instance_;
  delete SendWarnInfo_reflection_;
  delete QuickProcessToSlowInfo::default_instance_;
  delete QuickProcessToSlowInfo_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\022\004comm\"\302\002\n\007PkgHead\022\035\n\006en_cmd"
    "\030\001 \002(\0162\r.comm.Command\022\022\n\nuint32_seq\030\002 \002("
    "\r\022\025\n\ruint32_result\030\003 \001(\r\022\022\n\nstr_errmsg\030\004"
    " \001(\t\022\020\n\010echo_buf\030\005 \001(\014\022!\n\031uint32_magic_r"
    "esponse_num\030\006 \001(\r\022\013\n\003uid\030\007 \001(\r\022\023\n\013req_ma"
    "chine\030\010 \001(\r\022\022\n\nreserved_1\030\t \001(\r\022\022\n\nreser"
    "ved_2\030\n \001(\r\022\022\n\nreserved_3\030\013 \001(\r\022\026\n\016str_r"
    "eserved_1\030\014 \001(\r\022\026\n\016str_reserved_2\030\r \001(\r\022"
    "\026\n\016str_reserved_3\030\016 \001(\r\"!\n\tHeartInfo\022\024\n\014"
    "bytes_req_ip\030\001 \001(\014\"J\n\010AttrInfo\022\026\n\016uint32"
    "_attr_id\030\001 \001(\r\022\031\n\021uint32_attr_value\030\002 \001("
    "\r\022\013\n\003str\030\003 \001(\014\"\237\001\n\nReportAttr\022\036\n\026uint32_"
    "client_rep_time\030\001 \001(\r\022\027\n\017bytes_report_ip"
    "\030\002 \001(\014\022%\n\rmsg_attr_info\030\003 \003(\0132\016.comm.Att"
    "rInfo\022\026\n\016report_host_id\030\004 \001(\005\022\031\n\016user_ma"
    "ster_id\030\005 \001(\r:\0011\"\263\001\n\nAppLogInfo\022\025\n\ruint3"
    "2_app_id\030\001 \002(\r\022\030\n\020uint32_module_id\030\002 \002(\r"
    "\022\027\n\017uint64_log_time\030\003 \002(\004\022\026\n\016uint32_log_"
    "seq\030\004 \001(\r\022\027\n\017uint32_log_type\030\005 \002(\r\022\021\n\tby"
    "tes_log\030\006 \002(\014\022\027\n\017bytes_report_ip\030\007 \001(\014\"f"
    "\n\014ReportAppLog\022\036\n\026uint32_client_rep_time"
    "\030\001 \001(\r\022\027\n\017bytes_report_ip\030\002 \001(\014\022\035\n\003log\030\003"
    " \003(\0132\020.comm.AppLogInfo\"A\n\rSendEmailInfo\022"
    "\014\n\004addr\030\001 \001(\014\022\017\n\007subject\030\002 \001(\014\022\021\n\ttext_b"
    "ody\030\003 \001(\014\"\263\001\n\014SendWarnInfo\022\017\n\007attr_id\030\001 "
    "\001(\r\022\021\n\tattr_name\030\002 \001(\014\022\022\n\nstart_time\030\003 \001"
    "(\r\022\021\n\twarn_flag\030\004 \001(\r\022\030\n\020warn_obj_type_i"
    "d\030\005 \001(\005\022\032\n\022warn_obj_type_name\030\006 \001(\014\022\021\n\tw"
    "arn_text\030\007 \001(\014\022\017\n\007warn_id\030\010 \001(\r\"\236\001\n\026Quic"
    "kProcessToSlowInfo\022\022\n\nmachine_id\030\001 \001(\005\022\036"
    "\n\026machine_last_attr_time\030\002 \001(\r\022\035\n\025machin"
    "e_last_log_time\030\003 \001(\r\022\026\n\016user_master_id\030"
    "\004 \001(\r\022\031\n\021quick_to_slow_cmd\030\005 \001(\005*\242\003\n\007Com"
    "mand\022\031\n\024SLOG_CLIENT_SEND_LOG\020\365\003\022\037\n\032MONIT"
    "OR_CLIENT_REPORT_ATTR\020\366\003\022\032\n\025CMD_SLOG_CLI"
    "ENT_HEART\020\370\003\022\"\n\035CMD_SLOG_MONITOR_CLIENT_"
    "HEART\020\371\003\022\"\n\035CMD_SLOG_GET_APP_LOG_SIZE_RE"
    "Q\020\372\003\022\"\n\035CMD_SLOG_GET_APP_LOG_SIZE_RSP\020\373\003"
    "\022%\n CMD_SLOG_REMOVE_OLD_APP_LOG_FILE\020\374\003\022"
    "\034\n\027CMD_SLOG_OPEN_SEND_WARN\020\376\003\022\035\n\030CMD_SLO"
    "G_OPEN_SEND_EMAIL\020\377\003\022$\n\037CMD_SEND_REALINF"
    "O_TO_CENTER_REQ\020\200\004\022%\n CMD_SEND_REALINFO_"
    "TO_CENTER_RESP\020\201\004\022\"\n\035CMD_QUICK_PROCESS_T"
    "O_SLOW_REQ\020\202\004*O\n\016QuickToSlowCmd\022\036\n\032QTS_M"
    "ACHINE_LAST_ATTR_TIME\020\001\022\035\n\031QTS_MACHINE_L"
    "AST_LOG_TIME\020\002", 1814);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  PkgHead::default_instance_ = new PkgHead();
  HeartInfo::default_instance_ = new HeartInfo();
  AttrInfo::default_instance_ = new AttrInfo();
  ReportAttr::default_instance_ = new ReportAttr();
  AppLogInfo::default_instance_ = new AppLogInfo();
  ReportAppLog::default_instance_ = new ReportAppLog();
  SendEmailInfo::default_instance_ = new SendEmailInfo();
  SendWarnInfo::default_instance_ = new SendWarnInfo();
  QuickProcessToSlowInfo::default_instance_ = new QuickProcessToSlowInfo();
  PkgHead::default_instance_->InitAsDefaultInstance();
  HeartInfo::default_instance_->InitAsDefaultInstance();
  AttrInfo::default_instance_->InitAsDefaultInstance();
  ReportAttr::default_instance_->InitAsDefaultInstance();
  AppLogInfo::default_instance_->InitAsDefaultInstance();
  ReportAppLog::default_instance_->InitAsDefaultInstance();
  SendEmailInfo::default_instance_->InitAsDefaultInstance();
  SendWarnInfo::default_instance_->InitAsDefaultInstance();
  QuickProcessToSlowInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;

const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}
bool Command_IsValid(int value) {
  switch(value) {
    case 501:
    case 502:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuickToSlowCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickToSlowCmd_descriptor_;
}
bool QuickToSlowCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string PkgHead::_default_str_errmsg_;
const ::std::string PkgHead::_default_echo_buf_;
#ifndef _MSC_VER
const int PkgHead::kEnCmdFieldNumber;
const int PkgHead::kUint32SeqFieldNumber;
const int PkgHead::kUint32ResultFieldNumber;
const int PkgHead::kStrErrmsgFieldNumber;
const int PkgHead::kEchoBufFieldNumber;
const int PkgHead::kUint32MagicResponseNumFieldNumber;
const int PkgHead::kUidFieldNumber;
const int PkgHead::kReqMachineFieldNumber;
const int PkgHead::kReserved1FieldNumber;
const int PkgHead::kReserved2FieldNumber;
const int PkgHead::kReserved3FieldNumber;
const int PkgHead::kStrReserved1FieldNumber;
const int PkgHead::kStrReserved2FieldNumber;
const int PkgHead::kStrReserved3FieldNumber;
#endif  // !_MSC_VER

PkgHead::PkgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PkgHead::InitAsDefaultInstance() {
}

PkgHead::PkgHead(const PkgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PkgHead::SharedCtor() {
  _cached_size_ = 0;
  en_cmd_ = 501;
  uint32_seq_ = 0u;
  uint32_result_ = 0u;
  str_errmsg_ = const_cast< ::std::string*>(&_default_str_errmsg_);
  echo_buf_ = const_cast< ::std::string*>(&_default_echo_buf_);
  uint32_magic_response_num_ = 0u;
  uid_ = 0u;
  req_machine_ = 0u;
  reserved_1_ = 0u;
  reserved_2_ = 0u;
  reserved_3_ = 0u;
  str_reserved_1_ = 0u;
  str_reserved_2_ = 0u;
  str_reserved_3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkgHead::~PkgHead() {
  SharedDtor();
}

void PkgHead::SharedDtor() {
  if (str_errmsg_ != &_default_str_errmsg_) {
    delete str_errmsg_;
  }
  if (echo_buf_ != &_default_echo_buf_) {
    delete echo_buf_;
  }
  if (this != default_instance_) {
  }
}

void PkgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkgHead_descriptor_;
}

const PkgHead& PkgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

PkgHead* PkgHead::default_instance_ = NULL;

PkgHead* PkgHead::New() const {
  return new PkgHead;
}

void PkgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    en_cmd_ = 501;
    uint32_seq_ = 0u;
    uint32_result_ = 0u;
    if (_has_bit(3)) {
      if (str_errmsg_ != &_default_str_errmsg_) {
        str_errmsg_->clear();
      }
    }
    if (_has_bit(4)) {
      if (echo_buf_ != &_default_echo_buf_) {
        echo_buf_->clear();
      }
    }
    uint32_magic_response_num_ = 0u;
    uid_ = 0u;
    req_machine_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reserved_1_ = 0u;
    reserved_2_ = 0u;
    reserved_3_ = 0u;
    str_reserved_1_ = 0u;
    str_reserved_2_ = 0u;
    str_reserved_3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .comm.Command en_cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (comm::Command_IsValid(value)) {
            set_en_cmd(static_cast< comm::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_seq;
        break;
      }
      
      // required uint32 uint32_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_seq_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint32_result;
        break;
      }
      
      // optional uint32 uint32_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_result_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_errmsg;
        break;
      }
      
      // optional string str_errmsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_errmsg().data(), this->str_errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_echo_buf;
        break;
      }
      
      // optional bytes echo_buf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_echo_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_echo_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uint32_magic_response_num;
        break;
      }
      
      // optional uint32 uint32_magic_response_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_magic_response_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_magic_response_num_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uid;
        break;
      }
      
      // optional uint32 uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_req_machine;
        break;
      }
      
      // optional uint32 req_machine = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_machine_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reserved_1;
        break;
      }
      
      // optional uint32 reserved_1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_1_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reserved_2;
        break;
      }
      
      // optional uint32 reserved_2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_2_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reserved_3;
        break;
      }
      
      // optional uint32 reserved_3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_3_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_str_reserved_1;
        break;
      }
      
      // optional uint32 str_reserved_1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_reserved_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str_reserved_1_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_str_reserved_2;
        break;
      }
      
      // optional uint32 str_reserved_2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_reserved_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str_reserved_2_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_str_reserved_3;
        break;
      }
      
      // optional uint32 str_reserved_3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str_reserved_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str_reserved_3_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PkgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .comm.Command en_cmd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->en_cmd(), output);
  }
  
  // required uint32 uint32_seq = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_seq(), output);
  }
  
  // optional uint32 uint32_result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32_result(), output);
  }
  
  // optional string str_errmsg = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_errmsg().data(), this->str_errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str_errmsg(), output);
  }
  
  // optional bytes echo_buf = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->echo_buf(), output);
  }
  
  // optional uint32 uint32_magic_response_num = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uint32_magic_response_num(), output);
  }
  
  // optional uint32 uid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uid(), output);
  }
  
  // optional uint32 req_machine = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->req_machine(), output);
  }
  
  // optional uint32 reserved_1 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reserved_1(), output);
  }
  
  // optional uint32 reserved_2 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->reserved_2(), output);
  }
  
  // optional uint32 reserved_3 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reserved_3(), output);
  }
  
  // optional uint32 str_reserved_1 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->str_reserved_1(), output);
  }
  
  // optional uint32 str_reserved_2 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->str_reserved_2(), output);
  }
  
  // optional uint32 str_reserved_3 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->str_reserved_3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PkgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .comm.Command en_cmd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->en_cmd(), target);
  }
  
  // required uint32 uint32_seq = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_seq(), target);
  }
  
  // optional uint32 uint32_result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32_result(), target);
  }
  
  // optional string str_errmsg = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_errmsg().data(), this->str_errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_errmsg(), target);
  }
  
  // optional bytes echo_buf = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->echo_buf(), target);
  }
  
  // optional uint32 uint32_magic_response_num = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uint32_magic_response_num(), target);
  }
  
  // optional uint32 uid = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uid(), target);
  }
  
  // optional uint32 req_machine = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->req_machine(), target);
  }
  
  // optional uint32 reserved_1 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reserved_1(), target);
  }
  
  // optional uint32 reserved_2 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->reserved_2(), target);
  }
  
  // optional uint32 reserved_3 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reserved_3(), target);
  }
  
  // optional uint32 str_reserved_1 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->str_reserved_1(), target);
  }
  
  // optional uint32 str_reserved_2 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->str_reserved_2(), target);
  }
  
  // optional uint32 str_reserved_3 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->str_reserved_3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PkgHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .comm.Command en_cmd = 1;
    if (has_en_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->en_cmd());
    }
    
    // required uint32 uint32_seq = 2;
    if (has_uint32_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_seq());
    }
    
    // optional uint32 uint32_result = 3;
    if (has_uint32_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_result());
    }
    
    // optional string str_errmsg = 4;
    if (has_str_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_errmsg());
    }
    
    // optional bytes echo_buf = 5;
    if (has_echo_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->echo_buf());
    }
    
    // optional uint32 uint32_magic_response_num = 6;
    if (has_uint32_magic_response_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_magic_response_num());
    }
    
    // optional uint32 uid = 7;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // optional uint32 req_machine = 8;
    if (has_req_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_machine());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 reserved_1 = 9;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved_1());
    }
    
    // optional uint32 reserved_2 = 10;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved_2());
    }
    
    // optional uint32 reserved_3 = 11;
    if (has_reserved_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved_3());
    }
    
    // optional uint32 str_reserved_1 = 12;
    if (has_str_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str_reserved_1());
    }
    
    // optional uint32 str_reserved_2 = 13;
    if (has_str_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str_reserved_2());
    }
    
    // optional uint32 str_reserved_3 = 14;
    if (has_str_reserved_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str_reserved_3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkgHead::MergeFrom(const PkgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_en_cmd(from.en_cmd());
    }
    if (from._has_bit(1)) {
      set_uint32_seq(from.uint32_seq());
    }
    if (from._has_bit(2)) {
      set_uint32_result(from.uint32_result());
    }
    if (from._has_bit(3)) {
      set_str_errmsg(from.str_errmsg());
    }
    if (from._has_bit(4)) {
      set_echo_buf(from.echo_buf());
    }
    if (from._has_bit(5)) {
      set_uint32_magic_response_num(from.uint32_magic_response_num());
    }
    if (from._has_bit(6)) {
      set_uid(from.uid());
    }
    if (from._has_bit(7)) {
      set_req_machine(from.req_machine());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_reserved_1(from.reserved_1());
    }
    if (from._has_bit(9)) {
      set_reserved_2(from.reserved_2());
    }
    if (from._has_bit(10)) {
      set_reserved_3(from.reserved_3());
    }
    if (from._has_bit(11)) {
      set_str_reserved_1(from.str_reserved_1());
    }
    if (from._has_bit(12)) {
      set_str_reserved_2(from.str_reserved_2());
    }
    if (from._has_bit(13)) {
      set_str_reserved_3(from.str_reserved_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkgHead::CopyFrom(const PkgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PkgHead::Swap(PkgHead* other) {
  if (other != this) {
    std::swap(en_cmd_, other->en_cmd_);
    std::swap(uint32_seq_, other->uint32_seq_);
    std::swap(uint32_result_, other->uint32_result_);
    std::swap(str_errmsg_, other->str_errmsg_);
    std::swap(echo_buf_, other->echo_buf_);
    std::swap(uint32_magic_response_num_, other->uint32_magic_response_num_);
    std::swap(uid_, other->uid_);
    std::swap(req_machine_, other->req_machine_);
    std::swap(reserved_1_, other->reserved_1_);
    std::swap(reserved_2_, other->reserved_2_);
    std::swap(reserved_3_, other->reserved_3_);
    std::swap(str_reserved_1_, other->str_reserved_1_);
    std::swap(str_reserved_2_, other->str_reserved_2_);
    std::swap(str_reserved_3_, other->str_reserved_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkgHead_descriptor_;
  metadata.reflection = PkgHead_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HeartInfo::_default_bytes_req_ip_;
#ifndef _MSC_VER
const int HeartInfo::kBytesReqIpFieldNumber;
#endif  // !_MSC_VER

HeartInfo::HeartInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartInfo::InitAsDefaultInstance() {
}

HeartInfo::HeartInfo(const HeartInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartInfo::SharedCtor() {
  _cached_size_ = 0;
  bytes_req_ip_ = const_cast< ::std::string*>(&_default_bytes_req_ip_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartInfo::~HeartInfo() {
  SharedDtor();
}

void HeartInfo::SharedDtor() {
  if (bytes_req_ip_ != &_default_bytes_req_ip_) {
    delete bytes_req_ip_;
  }
  if (this != default_instance_) {
  }
}

void HeartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartInfo_descriptor_;
}

const HeartInfo& HeartInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

HeartInfo* HeartInfo::default_instance_ = NULL;

HeartInfo* HeartInfo::New() const {
  return new HeartInfo;
}

void HeartInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bytes_req_ip_ != &_default_bytes_req_ip_) {
        bytes_req_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bytes_req_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_req_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes bytes_req_ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bytes_req_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes bytes_req_ip = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bytes_req_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bytes_req_ip = 1;
    if (has_bytes_req_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_req_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartInfo::MergeFrom(const HeartInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bytes_req_ip(from.bytes_req_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartInfo::CopyFrom(const HeartInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartInfo::IsInitialized() const {
  
  return true;
}

void HeartInfo::Swap(HeartInfo* other) {
  if (other != this) {
    std::swap(bytes_req_ip_, other->bytes_req_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartInfo_descriptor_;
  metadata.reflection = HeartInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AttrInfo::_default_str_;
#ifndef _MSC_VER
const int AttrInfo::kUint32AttrIdFieldNumber;
const int AttrInfo::kUint32AttrValueFieldNumber;
const int AttrInfo::kStrFieldNumber;
#endif  // !_MSC_VER

AttrInfo::AttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrInfo::InitAsDefaultInstance() {
}

AttrInfo::AttrInfo(const AttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrInfo::SharedCtor() {
  _cached_size_ = 0;
  uint32_attr_id_ = 0u;
  uint32_attr_value_ = 0u;
  str_ = const_cast< ::std::string*>(&_default_str_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrInfo::~AttrInfo() {
  SharedDtor();
}

void AttrInfo::SharedDtor() {
  if (str_ != &_default_str_) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void AttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrInfo_descriptor_;
}

const AttrInfo& AttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

AttrInfo* AttrInfo::default_instance_ = NULL;

AttrInfo* AttrInfo::New() const {
  return new AttrInfo;
}

void AttrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_attr_id_ = 0u;
    uint32_attr_value_ = 0u;
    if (_has_bit(2)) {
      if (str_ != &_default_str_) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_attr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_attr_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_attr_value;
        break;
      }
      
      // optional uint32 uint32_attr_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_attr_value_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str;
        break;
      }
      
      // optional bytes str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_attr_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_attr_id(), output);
  }
  
  // optional uint32 uint32_attr_value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_attr_value(), output);
  }
  
  // optional bytes str = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_attr_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_attr_id(), target);
  }
  
  // optional uint32 uint32_attr_value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_attr_value(), target);
  }
  
  // optional bytes str = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_attr_id = 1;
    if (has_uint32_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_attr_id());
    }
    
    // optional uint32 uint32_attr_value = 2;
    if (has_uint32_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_attr_value());
    }
    
    // optional bytes str = 3;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrInfo::MergeFrom(const AttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uint32_attr_id(from.uint32_attr_id());
    }
    if (from._has_bit(1)) {
      set_uint32_attr_value(from.uint32_attr_value());
    }
    if (from._has_bit(2)) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrInfo::CopyFrom(const AttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrInfo::IsInitialized() const {
  
  return true;
}

void AttrInfo::Swap(AttrInfo* other) {
  if (other != this) {
    std::swap(uint32_attr_id_, other->uint32_attr_id_);
    std::swap(uint32_attr_value_, other->uint32_attr_value_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrInfo_descriptor_;
  metadata.reflection = AttrInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReportAttr::_default_bytes_report_ip_;
#ifndef _MSC_VER
const int ReportAttr::kUint32ClientRepTimeFieldNumber;
const int ReportAttr::kBytesReportIpFieldNumber;
const int ReportAttr::kMsgAttrInfoFieldNumber;
const int ReportAttr::kReportHostIdFieldNumber;
const int ReportAttr::kUserMasterIdFieldNumber;
#endif  // !_MSC_VER

ReportAttr::ReportAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportAttr::InitAsDefaultInstance() {
}

ReportAttr::ReportAttr(const ReportAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportAttr::SharedCtor() {
  _cached_size_ = 0;
  uint32_client_rep_time_ = 0u;
  bytes_report_ip_ = const_cast< ::std::string*>(&_default_bytes_report_ip_);
  report_host_id_ = 0;
  user_master_id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAttr::~ReportAttr() {
  SharedDtor();
}

void ReportAttr::SharedDtor() {
  if (bytes_report_ip_ != &_default_bytes_report_ip_) {
    delete bytes_report_ip_;
  }
  if (this != default_instance_) {
  }
}

void ReportAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAttr_descriptor_;
}

const ReportAttr& ReportAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

ReportAttr* ReportAttr::default_instance_ = NULL;

ReportAttr* ReportAttr::New() const {
  return new ReportAttr;
}

void ReportAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_client_rep_time_ = 0u;
    if (_has_bit(1)) {
      if (bytes_report_ip_ != &_default_bytes_report_ip_) {
        bytes_report_ip_->clear();
      }
    }
    report_host_id_ = 0;
    user_master_id_ = 1u;
  }
  msg_attr_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_client_rep_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_client_rep_time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bytes_report_ip;
        break;
      }
      
      // optional bytes bytes_report_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_report_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_report_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_attr_info;
        break;
      }
      
      // repeated .comm.AttrInfo msg_attr_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_attr_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_attr_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_attr_info;
        if (input->ExpectTag(32)) goto parse_report_host_id;
        break;
      }
      
      // optional int32 report_host_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_host_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_host_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_master_id;
        break;
      }
      
      // optional uint32 user_master_id = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_master_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_master_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_client_rep_time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_client_rep_time(), output);
  }
  
  // optional bytes bytes_report_ip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bytes_report_ip(), output);
  }
  
  // repeated .comm.AttrInfo msg_attr_info = 3;
  for (int i = 0; i < this->msg_attr_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg_attr_info(i), output);
  }
  
  // optional int32 report_host_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->report_host_id(), output);
  }
  
  // optional uint32 user_master_id = 5 [default = 1];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_master_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_client_rep_time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_client_rep_time(), target);
  }
  
  // optional bytes bytes_report_ip = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes_report_ip(), target);
  }
  
  // repeated .comm.AttrInfo msg_attr_info = 3;
  for (int i = 0; i < this->msg_attr_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg_attr_info(i), target);
  }
  
  // optional int32 report_host_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->report_host_id(), target);
  }
  
  // optional uint32 user_master_id = 5 [default = 1];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->user_master_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_client_rep_time = 1;
    if (has_uint32_client_rep_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_client_rep_time());
    }
    
    // optional bytes bytes_report_ip = 2;
    if (has_bytes_report_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_report_ip());
    }
    
    // optional int32 report_host_id = 4;
    if (has_report_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_host_id());
    }
    
    // optional uint32 user_master_id = 5 [default = 1];
    if (has_user_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_master_id());
    }
    
  }
  // repeated .comm.AttrInfo msg_attr_info = 3;
  total_size += 1 * this->msg_attr_info_size();
  for (int i = 0; i < this->msg_attr_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_attr_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAttr::MergeFrom(const ReportAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_attr_info_.MergeFrom(from.msg_attr_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uint32_client_rep_time(from.uint32_client_rep_time());
    }
    if (from._has_bit(1)) {
      set_bytes_report_ip(from.bytes_report_ip());
    }
    if (from._has_bit(3)) {
      set_report_host_id(from.report_host_id());
    }
    if (from._has_bit(4)) {
      set_user_master_id(from.user_master_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAttr::CopyFrom(const ReportAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAttr::IsInitialized() const {
  
  return true;
}

void ReportAttr::Swap(ReportAttr* other) {
  if (other != this) {
    std::swap(uint32_client_rep_time_, other->uint32_client_rep_time_);
    std::swap(bytes_report_ip_, other->bytes_report_ip_);
    msg_attr_info_.Swap(&other->msg_attr_info_);
    std::swap(report_host_id_, other->report_host_id_);
    std::swap(user_master_id_, other->user_master_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAttr_descriptor_;
  metadata.reflection = ReportAttr_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AppLogInfo::_default_bytes_log_;
const ::std::string AppLogInfo::_default_bytes_report_ip_;
#ifndef _MSC_VER
const int AppLogInfo::kUint32AppIdFieldNumber;
const int AppLogInfo::kUint32ModuleIdFieldNumber;
const int AppLogInfo::kUint64LogTimeFieldNumber;
const int AppLogInfo::kUint32LogSeqFieldNumber;
const int AppLogInfo::kUint32LogTypeFieldNumber;
const int AppLogInfo::kBytesLogFieldNumber;
const int AppLogInfo::kBytesReportIpFieldNumber;
#endif  // !_MSC_VER

AppLogInfo::AppLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppLogInfo::InitAsDefaultInstance() {
}

AppLogInfo::AppLogInfo(const AppLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppLogInfo::SharedCtor() {
  _cached_size_ = 0;
  uint32_app_id_ = 0u;
  uint32_module_id_ = 0u;
  uint64_log_time_ = GOOGLE_ULONGLONG(0);
  uint32_log_seq_ = 0u;
  uint32_log_type_ = 0u;
  bytes_log_ = const_cast< ::std::string*>(&_default_bytes_log_);
  bytes_report_ip_ = const_cast< ::std::string*>(&_default_bytes_report_ip_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppLogInfo::~AppLogInfo() {
  SharedDtor();
}

void AppLogInfo::SharedDtor() {
  if (bytes_log_ != &_default_bytes_log_) {
    delete bytes_log_;
  }
  if (bytes_report_ip_ != &_default_bytes_report_ip_) {
    delete bytes_report_ip_;
  }
  if (this != default_instance_) {
  }
}

void AppLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppLogInfo_descriptor_;
}

const AppLogInfo& AppLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

AppLogInfo* AppLogInfo::default_instance_ = NULL;

AppLogInfo* AppLogInfo::New() const {
  return new AppLogInfo;
}

void AppLogInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_app_id_ = 0u;
    uint32_module_id_ = 0u;
    uint64_log_time_ = GOOGLE_ULONGLONG(0);
    uint32_log_seq_ = 0u;
    uint32_log_type_ = 0u;
    if (_has_bit(5)) {
      if (bytes_log_ != &_default_bytes_log_) {
        bytes_log_->clear();
      }
    }
    if (_has_bit(6)) {
      if (bytes_report_ip_ != &_default_bytes_report_ip_) {
        bytes_report_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uint32_app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_app_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_module_id;
        break;
      }
      
      // required uint32 uint32_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_module_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uint64_log_time;
        break;
      }
      
      // required uint64 uint64_log_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_log_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint32_log_seq;
        break;
      }
      
      // optional uint32 uint32_log_seq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_log_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_log_seq_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint32_log_type;
        break;
      }
      
      // required uint32 uint32_log_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_log_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_log_type_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bytes_log;
        break;
      }
      
      // required bytes bytes_log = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bytes_report_ip;
        break;
      }
      
      // optional bytes bytes_report_ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_report_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_report_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uint32_app_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_app_id(), output);
  }
  
  // required uint32 uint32_module_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_module_id(), output);
  }
  
  // required uint64 uint64_log_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uint64_log_time(), output);
  }
  
  // optional uint32 uint32_log_seq = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32_log_seq(), output);
  }
  
  // required uint32 uint32_log_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_log_type(), output);
  }
  
  // required bytes bytes_log = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->bytes_log(), output);
  }
  
  // optional bytes bytes_report_ip = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->bytes_report_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uint32_app_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_app_id(), target);
  }
  
  // required uint32 uint32_module_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_module_id(), target);
  }
  
  // required uint64 uint64_log_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uint64_log_time(), target);
  }
  
  // optional uint32 uint32_log_seq = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32_log_seq(), target);
  }
  
  // required uint32 uint32_log_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_log_type(), target);
  }
  
  // required bytes bytes_log = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->bytes_log(), target);
  }
  
  // optional bytes bytes_report_ip = 7;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->bytes_report_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppLogInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uint32_app_id = 1;
    if (has_uint32_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_app_id());
    }
    
    // required uint32 uint32_module_id = 2;
    if (has_uint32_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_module_id());
    }
    
    // required uint64 uint64_log_time = 3;
    if (has_uint64_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_log_time());
    }
    
    // optional uint32 uint32_log_seq = 4;
    if (has_uint32_log_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_log_seq());
    }
    
    // required uint32 uint32_log_type = 5;
    if (has_uint32_log_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_log_type());
    }
    
    // required bytes bytes_log = 6;
    if (has_bytes_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_log());
    }
    
    // optional bytes bytes_report_ip = 7;
    if (has_bytes_report_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_report_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppLogInfo::MergeFrom(const AppLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uint32_app_id(from.uint32_app_id());
    }
    if (from._has_bit(1)) {
      set_uint32_module_id(from.uint32_module_id());
    }
    if (from._has_bit(2)) {
      set_uint64_log_time(from.uint64_log_time());
    }
    if (from._has_bit(3)) {
      set_uint32_log_seq(from.uint32_log_seq());
    }
    if (from._has_bit(4)) {
      set_uint32_log_type(from.uint32_log_type());
    }
    if (from._has_bit(5)) {
      set_bytes_log(from.bytes_log());
    }
    if (from._has_bit(6)) {
      set_bytes_report_ip(from.bytes_report_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppLogInfo::CopyFrom(const AppLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppLogInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  return true;
}

void AppLogInfo::Swap(AppLogInfo* other) {
  if (other != this) {
    std::swap(uint32_app_id_, other->uint32_app_id_);
    std::swap(uint32_module_id_, other->uint32_module_id_);
    std::swap(uint64_log_time_, other->uint64_log_time_);
    std::swap(uint32_log_seq_, other->uint32_log_seq_);
    std::swap(uint32_log_type_, other->uint32_log_type_);
    std::swap(bytes_log_, other->bytes_log_);
    std::swap(bytes_report_ip_, other->bytes_report_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppLogInfo_descriptor_;
  metadata.reflection = AppLogInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReportAppLog::_default_bytes_report_ip_;
#ifndef _MSC_VER
const int ReportAppLog::kUint32ClientRepTimeFieldNumber;
const int ReportAppLog::kBytesReportIpFieldNumber;
const int ReportAppLog::kLogFieldNumber;
#endif  // !_MSC_VER

ReportAppLog::ReportAppLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportAppLog::InitAsDefaultInstance() {
}

ReportAppLog::ReportAppLog(const ReportAppLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportAppLog::SharedCtor() {
  _cached_size_ = 0;
  uint32_client_rep_time_ = 0u;
  bytes_report_ip_ = const_cast< ::std::string*>(&_default_bytes_report_ip_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAppLog::~ReportAppLog() {
  SharedDtor();
}

void ReportAppLog::SharedDtor() {
  if (bytes_report_ip_ != &_default_bytes_report_ip_) {
    delete bytes_report_ip_;
  }
  if (this != default_instance_) {
  }
}

void ReportAppLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAppLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAppLog_descriptor_;
}

const ReportAppLog& ReportAppLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

ReportAppLog* ReportAppLog::default_instance_ = NULL;

ReportAppLog* ReportAppLog::New() const {
  return new ReportAppLog;
}

void ReportAppLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uint32_client_rep_time_ = 0u;
    if (_has_bit(1)) {
      if (bytes_report_ip_ != &_default_bytes_report_ip_) {
        bytes_report_ip_->clear();
      }
    }
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAppLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uint32_client_rep_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_client_rep_time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bytes_report_ip;
        break;
      }
      
      // optional bytes bytes_report_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_report_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_report_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // repeated .comm.AppLogInfo log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportAppLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uint32_client_rep_time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uint32_client_rep_time(), output);
  }
  
  // optional bytes bytes_report_ip = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bytes_report_ip(), output);
  }
  
  // repeated .comm.AppLogInfo log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportAppLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uint32_client_rep_time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uint32_client_rep_time(), target);
  }
  
  // optional bytes bytes_report_ip = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes_report_ip(), target);
  }
  
  // repeated .comm.AppLogInfo log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportAppLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uint32_client_rep_time = 1;
    if (has_uint32_client_rep_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_client_rep_time());
    }
    
    // optional bytes bytes_report_ip = 2;
    if (has_bytes_report_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_report_ip());
    }
    
  }
  // repeated .comm.AppLogInfo log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAppLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAppLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAppLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAppLog::MergeFrom(const ReportAppLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uint32_client_rep_time(from.uint32_client_rep_time());
    }
    if (from._has_bit(1)) {
      set_bytes_report_ip(from.bytes_report_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAppLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAppLog::CopyFrom(const ReportAppLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAppLog::IsInitialized() const {
  
  for (int i = 0; i < log_size(); i++) {
    if (!this->log(i).IsInitialized()) return false;
  }
  return true;
}

void ReportAppLog::Swap(ReportAppLog* other) {
  if (other != this) {
    std::swap(uint32_client_rep_time_, other->uint32_client_rep_time_);
    std::swap(bytes_report_ip_, other->bytes_report_ip_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAppLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAppLog_descriptor_;
  metadata.reflection = ReportAppLog_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendEmailInfo::_default_addr_;
const ::std::string SendEmailInfo::_default_subject_;
const ::std::string SendEmailInfo::_default_text_body_;
#ifndef _MSC_VER
const int SendEmailInfo::kAddrFieldNumber;
const int SendEmailInfo::kSubjectFieldNumber;
const int SendEmailInfo::kTextBodyFieldNumber;
#endif  // !_MSC_VER

SendEmailInfo::SendEmailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendEmailInfo::InitAsDefaultInstance() {
}

SendEmailInfo::SendEmailInfo(const SendEmailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendEmailInfo::SharedCtor() {
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  subject_ = const_cast< ::std::string*>(&_default_subject_);
  text_body_ = const_cast< ::std::string*>(&_default_text_body_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendEmailInfo::~SendEmailInfo() {
  SharedDtor();
}

void SendEmailInfo::SharedDtor() {
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (subject_ != &_default_subject_) {
    delete subject_;
  }
  if (text_body_ != &_default_text_body_) {
    delete text_body_;
  }
  if (this != default_instance_) {
  }
}

void SendEmailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendEmailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendEmailInfo_descriptor_;
}

const SendEmailInfo& SendEmailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

SendEmailInfo* SendEmailInfo::default_instance_ = NULL;

SendEmailInfo* SendEmailInfo::New() const {
  return new SendEmailInfo;
}

void SendEmailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subject_ != &_default_subject_) {
        subject_->clear();
      }
    }
    if (_has_bit(2)) {
      if (text_body_ != &_default_text_body_) {
        text_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendEmailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subject;
        break;
      }
      
      // optional bytes subject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text_body;
        break;
      }
      
      // optional bytes text_body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendEmailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes addr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->addr(), output);
  }
  
  // optional bytes subject = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->subject(), output);
  }
  
  // optional bytes text_body = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->text_body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendEmailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes addr = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->addr(), target);
  }
  
  // optional bytes subject = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subject(), target);
  }
  
  // optional bytes text_body = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->text_body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendEmailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addr());
    }
    
    // optional bytes subject = 2;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subject());
    }
    
    // optional bytes text_body = 3;
    if (has_text_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text_body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendEmailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendEmailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendEmailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendEmailInfo::MergeFrom(const SendEmailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_addr(from.addr());
    }
    if (from._has_bit(1)) {
      set_subject(from.subject());
    }
    if (from._has_bit(2)) {
      set_text_body(from.text_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendEmailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendEmailInfo::CopyFrom(const SendEmailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendEmailInfo::IsInitialized() const {
  
  return true;
}

void SendEmailInfo::Swap(SendEmailInfo* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(subject_, other->subject_);
    std::swap(text_body_, other->text_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendEmailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendEmailInfo_descriptor_;
  metadata.reflection = SendEmailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendWarnInfo::_default_attr_name_;
const ::std::string SendWarnInfo::_default_warn_obj_type_name_;
const ::std::string SendWarnInfo::_default_warn_text_;
#ifndef _MSC_VER
const int SendWarnInfo::kAttrIdFieldNumber;
const int SendWarnInfo::kAttrNameFieldNumber;
const int SendWarnInfo::kStartTimeFieldNumber;
const int SendWarnInfo::kWarnFlagFieldNumber;
const int SendWarnInfo::kWarnObjTypeIdFieldNumber;
const int SendWarnInfo::kWarnObjTypeNameFieldNumber;
const int SendWarnInfo::kWarnTextFieldNumber;
const int SendWarnInfo::kWarnIdFieldNumber;
#endif  // !_MSC_VER

SendWarnInfo::SendWarnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendWarnInfo::InitAsDefaultInstance() {
}

SendWarnInfo::SendWarnInfo(const SendWarnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendWarnInfo::SharedCtor() {
  _cached_size_ = 0;
  attr_id_ = 0u;
  attr_name_ = const_cast< ::std::string*>(&_default_attr_name_);
  start_time_ = 0u;
  warn_flag_ = 0u;
  warn_obj_type_id_ = 0;
  warn_obj_type_name_ = const_cast< ::std::string*>(&_default_warn_obj_type_name_);
  warn_text_ = const_cast< ::std::string*>(&_default_warn_text_);
  warn_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendWarnInfo::~SendWarnInfo() {
  SharedDtor();
}

void SendWarnInfo::SharedDtor() {
  if (attr_name_ != &_default_attr_name_) {
    delete attr_name_;
  }
  if (warn_obj_type_name_ != &_default_warn_obj_type_name_) {
    delete warn_obj_type_name_;
  }
  if (warn_text_ != &_default_warn_text_) {
    delete warn_text_;
  }
  if (this != default_instance_) {
  }
}

void SendWarnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendWarnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendWarnInfo_descriptor_;
}

const SendWarnInfo& SendWarnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

SendWarnInfo* SendWarnInfo::default_instance_ = NULL;

SendWarnInfo* SendWarnInfo::New() const {
  return new SendWarnInfo;
}

void SendWarnInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_id_ = 0u;
    if (_has_bit(1)) {
      if (attr_name_ != &_default_attr_name_) {
        attr_name_->clear();
      }
    }
    start_time_ = 0u;
    warn_flag_ = 0u;
    warn_obj_type_id_ = 0;
    if (_has_bit(5)) {
      if (warn_obj_type_name_ != &_default_warn_obj_type_name_) {
        warn_obj_type_name_->clear();
      }
    }
    if (_has_bit(6)) {
      if (warn_text_ != &_default_warn_text_) {
        warn_text_->clear();
      }
    }
    warn_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendWarnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_name;
        break;
      }
      
      // optional bytes attr_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }
      
      // optional uint32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_warn_flag;
        break;
      }
      
      // optional uint32 warn_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warn_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warn_flag_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_warn_obj_type_id;
        break;
      }
      
      // optional int32 warn_obj_type_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warn_obj_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warn_obj_type_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_warn_obj_type_name;
        break;
      }
      
      // optional bytes warn_obj_type_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warn_obj_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_warn_obj_type_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_warn_text;
        break;
      }
      
      // optional bytes warn_text = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warn_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_warn_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_warn_id;
        break;
      }
      
      // optional uint32 warn_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warn_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warn_id_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendWarnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attr_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_id(), output);
  }
  
  // optional bytes attr_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attr_name(), output);
  }
  
  // optional uint32 start_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }
  
  // optional uint32 warn_flag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->warn_flag(), output);
  }
  
  // optional int32 warn_obj_type_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->warn_obj_type_id(), output);
  }
  
  // optional bytes warn_obj_type_name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->warn_obj_type_name(), output);
  }
  
  // optional bytes warn_text = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->warn_text(), output);
  }
  
  // optional uint32 warn_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->warn_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendWarnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attr_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attr_id(), target);
  }
  
  // optional bytes attr_name = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attr_name(), target);
  }
  
  // optional uint32 start_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }
  
  // optional uint32 warn_flag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->warn_flag(), target);
  }
  
  // optional int32 warn_obj_type_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->warn_obj_type_id(), target);
  }
  
  // optional bytes warn_obj_type_name = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->warn_obj_type_name(), target);
  }
  
  // optional bytes warn_text = 7;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->warn_text(), target);
  }
  
  // optional uint32 warn_id = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->warn_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendWarnInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attr_id = 1;
    if (has_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_id());
    }
    
    // optional bytes attr_name = 2;
    if (has_attr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_name());
    }
    
    // optional uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }
    
    // optional uint32 warn_flag = 4;
    if (has_warn_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warn_flag());
    }
    
    // optional int32 warn_obj_type_id = 5;
    if (has_warn_obj_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warn_obj_type_id());
    }
    
    // optional bytes warn_obj_type_name = 6;
    if (has_warn_obj_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->warn_obj_type_name());
    }
    
    // optional bytes warn_text = 7;
    if (has_warn_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->warn_text());
    }
    
    // optional uint32 warn_id = 8;
    if (has_warn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warn_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendWarnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendWarnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendWarnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendWarnInfo::MergeFrom(const SendWarnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attr_id(from.attr_id());
    }
    if (from._has_bit(1)) {
      set_attr_name(from.attr_name());
    }
    if (from._has_bit(2)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(3)) {
      set_warn_flag(from.warn_flag());
    }
    if (from._has_bit(4)) {
      set_warn_obj_type_id(from.warn_obj_type_id());
    }
    if (from._has_bit(5)) {
      set_warn_obj_type_name(from.warn_obj_type_name());
    }
    if (from._has_bit(6)) {
      set_warn_text(from.warn_text());
    }
    if (from._has_bit(7)) {
      set_warn_id(from.warn_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendWarnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendWarnInfo::CopyFrom(const SendWarnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendWarnInfo::IsInitialized() const {
  
  return true;
}

void SendWarnInfo::Swap(SendWarnInfo* other) {
  if (other != this) {
    std::swap(attr_id_, other->attr_id_);
    std::swap(attr_name_, other->attr_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(warn_flag_, other->warn_flag_);
    std::swap(warn_obj_type_id_, other->warn_obj_type_id_);
    std::swap(warn_obj_type_name_, other->warn_obj_type_name_);
    std::swap(warn_text_, other->warn_text_);
    std::swap(warn_id_, other->warn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendWarnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendWarnInfo_descriptor_;
  metadata.reflection = SendWarnInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickProcessToSlowInfo::kMachineIdFieldNumber;
const int QuickProcessToSlowInfo::kMachineLastAttrTimeFieldNumber;
const int QuickProcessToSlowInfo::kMachineLastLogTimeFieldNumber;
const int QuickProcessToSlowInfo::kUserMasterIdFieldNumber;
const int QuickProcessToSlowInfo::kQuickToSlowCmdFieldNumber;
#endif  // !_MSC_VER

QuickProcessToSlowInfo::QuickProcessToSlowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickProcessToSlowInfo::InitAsDefaultInstance() {
}

QuickProcessToSlowInfo::QuickProcessToSlowInfo(const QuickProcessToSlowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickProcessToSlowInfo::SharedCtor() {
  _cached_size_ = 0;
  machine_id_ = 0;
  machine_last_attr_time_ = 0u;
  machine_last_log_time_ = 0u;
  user_master_id_ = 0u;
  quick_to_slow_cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickProcessToSlowInfo::~QuickProcessToSlowInfo() {
  SharedDtor();
}

void QuickProcessToSlowInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickProcessToSlowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickProcessToSlowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickProcessToSlowInfo_descriptor_;
}

const QuickProcessToSlowInfo& QuickProcessToSlowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

QuickProcessToSlowInfo* QuickProcessToSlowInfo::default_instance_ = NULL;

QuickProcessToSlowInfo* QuickProcessToSlowInfo::New() const {
  return new QuickProcessToSlowInfo;
}

void QuickProcessToSlowInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    machine_id_ = 0;
    machine_last_attr_time_ = 0u;
    machine_last_log_time_ = 0u;
    user_master_id_ = 0u;
    quick_to_slow_cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickProcessToSlowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 machine_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_machine_last_attr_time;
        break;
      }
      
      // optional uint32 machine_last_attr_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_machine_last_attr_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &machine_last_attr_time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_machine_last_log_time;
        break;
      }
      
      // optional uint32 machine_last_log_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_machine_last_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &machine_last_log_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_master_id;
        break;
      }
      
      // optional uint32 user_master_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_master_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_master_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quick_to_slow_cmd;
        break;
      }
      
      // optional int32 quick_to_slow_cmd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quick_to_slow_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quick_to_slow_cmd_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickProcessToSlowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 machine_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->machine_id(), output);
  }
  
  // optional uint32 machine_last_attr_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->machine_last_attr_time(), output);
  }
  
  // optional uint32 machine_last_log_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->machine_last_log_time(), output);
  }
  
  // optional uint32 user_master_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_master_id(), output);
  }
  
  // optional int32 quick_to_slow_cmd = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quick_to_slow_cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickProcessToSlowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 machine_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->machine_id(), target);
  }
  
  // optional uint32 machine_last_attr_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->machine_last_attr_time(), target);
  }
  
  // optional uint32 machine_last_log_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->machine_last_log_time(), target);
  }
  
  // optional uint32 user_master_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_master_id(), target);
  }
  
  // optional int32 quick_to_slow_cmd = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quick_to_slow_cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickProcessToSlowInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 machine_id = 1;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->machine_id());
    }
    
    // optional uint32 machine_last_attr_time = 2;
    if (has_machine_last_attr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->machine_last_attr_time());
    }
    
    // optional uint32 machine_last_log_time = 3;
    if (has_machine_last_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->machine_last_log_time());
    }
    
    // optional uint32 user_master_id = 4;
    if (has_user_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_master_id());
    }
    
    // optional int32 quick_to_slow_cmd = 5;
    if (has_quick_to_slow_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quick_to_slow_cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickProcessToSlowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickProcessToSlowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickProcessToSlowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickProcessToSlowInfo::MergeFrom(const QuickProcessToSlowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_machine_id(from.machine_id());
    }
    if (from._has_bit(1)) {
      set_machine_last_attr_time(from.machine_last_attr_time());
    }
    if (from._has_bit(2)) {
      set_machine_last_log_time(from.machine_last_log_time());
    }
    if (from._has_bit(3)) {
      set_user_master_id(from.user_master_id());
    }
    if (from._has_bit(4)) {
      set_quick_to_slow_cmd(from.quick_to_slow_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickProcessToSlowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickProcessToSlowInfo::CopyFrom(const QuickProcessToSlowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickProcessToSlowInfo::IsInitialized() const {
  
  return true;
}

void QuickProcessToSlowInfo::Swap(QuickProcessToSlowInfo* other) {
  if (other != this) {
    std::swap(machine_id_, other->machine_id_);
    std::swap(machine_last_attr_time_, other->machine_last_attr_time_);
    std::swap(machine_last_log_time_, other->machine_last_log_time_);
    std::swap(user_master_id_, other->user_master_id_);
    std::swap(quick_to_slow_cmd_, other->quick_to_slow_cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickProcessToSlowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickProcessToSlowInfo_descriptor_;
  metadata.reflection = QuickProcessToSlowInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
