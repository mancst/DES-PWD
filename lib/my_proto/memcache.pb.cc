// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "memcache.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* AttrVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* MtMemcacheMachineAttrDayVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MtMemcacheMachineAttrDayVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorMemcache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorMemcache_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcTimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcTimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcTimeInfoAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcTimeInfoAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcMachineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcMachineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcAttrTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcAttrTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcUserAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcUserAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemcUserAttrTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemcUserAttrTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MmapUserAttrTypeTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MmapUserAttrTypeTree_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AttrInfoFlag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_memcache_2eproto() {
  protobuf_AddDesc_memcache_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "memcache.proto");
  GOOGLE_CHECK(file != NULL);
  AttrVal_descriptor_ = file->message_type(0);
  static const int AttrVal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrVal, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrVal, val_),
  };
  AttrVal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrVal_descriptor_,
      AttrVal::default_instance_,
      AttrVal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrVal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrVal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrVal));
  MtMemcacheMachineAttrDayVal_descriptor_ = file->message_type(1);
  static const int MtMemcacheMachineAttrDayVal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MtMemcacheMachineAttrDayVal, attr_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MtMemcacheMachineAttrDayVal, max_idx_),
  };
  MtMemcacheMachineAttrDayVal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MtMemcacheMachineAttrDayVal_descriptor_,
      MtMemcacheMachineAttrDayVal::default_instance_,
      MtMemcacheMachineAttrDayVal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MtMemcacheMachineAttrDayVal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MtMemcacheMachineAttrDayVal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MtMemcacheMachineAttrDayVal));
  MonitorMemcache_descriptor_ = file->message_type(2);
  static const int MonitorMemcache_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMemcache, machine_attr_day_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMemcache, now_static_val_),
  };
  MonitorMemcache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonitorMemcache_descriptor_,
      MonitorMemcache::default_instance_,
      MonitorMemcache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMemcache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorMemcache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonitorMemcache));
  MemcTimeInfo_descriptor_ = file->message_type(3);
  static const int MemcTimeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcTimeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcTimeInfo, time_),
  };
  MemcTimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcTimeInfo_descriptor_,
      MemcTimeInfo::default_instance_,
      MemcTimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcTimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcTimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcTimeInfo));
  MemcTimeInfoAll_descriptor_ = file->message_type(4);
  static const int MemcTimeInfoAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcTimeInfoAll, info_),
  };
  MemcTimeInfoAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcTimeInfoAll_descriptor_,
      MemcTimeInfoAll::default_instance_,
      MemcTimeInfoAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcTimeInfoAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcTimeInfoAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcTimeInfoAll));
  MemcViewInfo_descriptor_ = file->message_type(5);
  static const int MemcViewInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcViewInfo, view_name_),
  };
  MemcViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcViewInfo_descriptor_,
      MemcViewInfo::default_instance_,
      MemcViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcViewInfo));
  MemcMachineInfo_descriptor_ = file->message_type(6);
  static const int MemcMachineInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcMachineInfo, ip1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcMachineInfo, ip2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcMachineInfo, ip3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcMachineInfo, ip4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcMachineInfo, name_),
  };
  MemcMachineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcMachineInfo_descriptor_,
      MemcMachineInfo::default_instance_,
      MemcMachineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcMachineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcMachineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcMachineInfo));
  MemcAttrTypeInfo_descriptor_ = file->message_type(7);
  static const int MemcAttrTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcAttrTypeInfo, attr_type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcAttrTypeInfo, attr_type_id_),
  };
  MemcAttrTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcAttrTypeInfo_descriptor_,
      MemcAttrTypeInfo::default_instance_,
      MemcAttrTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcAttrTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcAttrTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcAttrTypeInfo));
  MemcAttrInfo_descriptor_ = file->message_type(8);
  static const int MemcAttrInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcAttrInfo, attr_name_),
  };
  MemcAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcAttrInfo_descriptor_,
      MemcAttrInfo::default_instance_,
      MemcAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcAttrInfo));
  MemcUserAttrInfo_descriptor_ = file->message_type(9);
  static const int MemcUserAttrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrInfo, attr_info_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrInfo, attr_list_),
  };
  MemcUserAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcUserAttrInfo_descriptor_,
      MemcUserAttrInfo::default_instance_,
      MemcUserAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcUserAttrInfo));
  MemcUserAttrTypeInfo_descriptor_ = file->message_type(10);
  static const int MemcUserAttrTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrTypeInfo, attr_type_info_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrTypeInfo, attr_type_list_),
  };
  MemcUserAttrTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemcUserAttrTypeInfo_descriptor_,
      MemcUserAttrTypeInfo::default_instance_,
      MemcUserAttrTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemcUserAttrTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemcUserAttrTypeInfo));
  MmapUserAttrTypeTree_descriptor_ = file->message_type(11);
  static const int MmapUserAttrTypeTree_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmapUserAttrTypeTree, attr_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmapUserAttrTypeTree, sub_type_list_),
  };
  MmapUserAttrTypeTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MmapUserAttrTypeTree_descriptor_,
      MmapUserAttrTypeTree::default_instance_,
      MmapUserAttrTypeTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmapUserAttrTypeTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MmapUserAttrTypeTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MmapUserAttrTypeTree));
  AttrInfoFlag_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_memcache_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrVal_descriptor_, &AttrVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MtMemcacheMachineAttrDayVal_descriptor_, &MtMemcacheMachineAttrDayVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonitorMemcache_descriptor_, &MonitorMemcache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcTimeInfo_descriptor_, &MemcTimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcTimeInfoAll_descriptor_, &MemcTimeInfoAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcViewInfo_descriptor_, &MemcViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcMachineInfo_descriptor_, &MemcMachineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcAttrTypeInfo_descriptor_, &MemcAttrTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcAttrInfo_descriptor_, &MemcAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcUserAttrInfo_descriptor_, &MemcUserAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemcUserAttrTypeInfo_descriptor_, &MemcUserAttrTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MmapUserAttrTypeTree_descriptor_, &MmapUserAttrTypeTree::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_memcache_2eproto() {
  delete AttrVal::default_instance_;
  delete AttrVal_reflection_;
  delete MtMemcacheMachineAttrDayVal::default_instance_;
  delete MtMemcacheMachineAttrDayVal_reflection_;
  delete MonitorMemcache::default_instance_;
  delete MonitorMemcache_reflection_;
  delete MemcTimeInfo::default_instance_;
  delete MemcTimeInfo_reflection_;
  delete MemcTimeInfoAll::default_instance_;
  delete MemcTimeInfoAll_reflection_;
  delete MemcViewInfo::default_instance_;
  delete MemcViewInfo_reflection_;
  delete MemcMachineInfo::default_instance_;
  delete MemcMachineInfo_reflection_;
  delete MemcAttrTypeInfo::default_instance_;
  delete MemcAttrTypeInfo_reflection_;
  delete MemcAttrInfo::default_instance_;
  delete MemcAttrInfo_reflection_;
  delete MemcUserAttrInfo::default_instance_;
  delete MemcUserAttrInfo_reflection_;
  delete MemcUserAttrTypeInfo::default_instance_;
  delete MemcUserAttrTypeInfo_reflection_;
  delete MmapUserAttrTypeTree::default_instance_;
  delete MmapUserAttrTypeTree_reflection_;
}

void protobuf_AddDesc_memcache_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016memcache.proto\022\004comm\"#\n\007AttrVal\022\013\n\003idx"
    "\030\001 \001(\r\022\013\n\003val\030\002 \001(\r\"R\n\033MtMemcacheMachine"
    "AttrDayVal\022\037\n\010attr_val\030\001 \003(\0132\r.comm.Attr"
    "Val\022\022\n\007max_idx\030\002 \001(\r:\0010\"j\n\017MonitorMemcac"
    "he\022?\n\024machine_attr_day_val\030\001 \001(\0132!.comm."
    "MtMemcacheMachineAttrDayVal\022\026\n\016now_stati"
    "c_val\030\002 \001(\r\"(\n\014MemcTimeInfo\022\n\n\002id\030\001 \001(\r\022"
    "\014\n\004time\030\002 \001(\r\"3\n\017MemcTimeInfoAll\022 \n\004info"
    "\030\001 \003(\0132\022.comm.MemcTimeInfo\"!\n\014MemcViewIn"
    "fo\022\021\n\tview_name\030\001 \001(\t\"S\n\017MemcMachineInfo"
    "\022\013\n\003ip1\030\001 \001(\r\022\013\n\003ip2\030\002 \001(\r\022\013\n\003ip3\030\003 \001(\r\022"
    "\013\n\003ip4\030\004 \001(\r\022\014\n\004name\030\005 \001(\t\"@\n\020MemcAttrTy"
    "peInfo\022\026\n\016attr_type_name\030\001 \001(\t\022\024\n\014attr_t"
    "ype_id\030\002 \001(\005\"!\n\014MemcAttrInfo\022\021\n\tattr_nam"
    "e\030\001 \001(\t\"P\n\020MemcUserAttrInfo\022\025\n\rattr_info"
    "_seq\030\001 \001(\r\022%\n\tattr_list\030\002 \003(\0132\022.comm.Mem"
    "cAttrInfo\"b\n\024MemcUserAttrTypeInfo\022\032\n\022att"
    "r_type_info_seq\030\001 \001(\r\022.\n\016attr_type_list\030"
    "\002 \003(\0132\026.comm.MemcAttrTypeInfo\"_\n\024MmapUse"
    "rAttrTypeTree\022\024\n\014attr_type_id\030\001 \001(\005\0221\n\rs"
    "ub_type_list\030\002 \003(\0132\032.comm.MmapUserAttrTy"
    "peTree*B\n\014AttrInfoFlag\022\031\n\025ATTR_INFO_FLAG"
    "_GLOBAL\020\001\022\027\n\023ATTR_INFO_FLAG_MASK\020\002", 914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "memcache.proto", &protobuf_RegisterTypes);
  AttrVal::default_instance_ = new AttrVal();
  MtMemcacheMachineAttrDayVal::default_instance_ = new MtMemcacheMachineAttrDayVal();
  MonitorMemcache::default_instance_ = new MonitorMemcache();
  MemcTimeInfo::default_instance_ = new MemcTimeInfo();
  MemcTimeInfoAll::default_instance_ = new MemcTimeInfoAll();
  MemcViewInfo::default_instance_ = new MemcViewInfo();
  MemcMachineInfo::default_instance_ = new MemcMachineInfo();
  MemcAttrTypeInfo::default_instance_ = new MemcAttrTypeInfo();
  MemcAttrInfo::default_instance_ = new MemcAttrInfo();
  MemcUserAttrInfo::default_instance_ = new MemcUserAttrInfo();
  MemcUserAttrTypeInfo::default_instance_ = new MemcUserAttrTypeInfo();
  MmapUserAttrTypeTree::default_instance_ = new MmapUserAttrTypeTree();
  AttrVal::default_instance_->InitAsDefaultInstance();
  MtMemcacheMachineAttrDayVal::default_instance_->InitAsDefaultInstance();
  MonitorMemcache::default_instance_->InitAsDefaultInstance();
  MemcTimeInfo::default_instance_->InitAsDefaultInstance();
  MemcTimeInfoAll::default_instance_->InitAsDefaultInstance();
  MemcViewInfo::default_instance_->InitAsDefaultInstance();
  MemcMachineInfo::default_instance_->InitAsDefaultInstance();
  MemcAttrTypeInfo::default_instance_->InitAsDefaultInstance();
  MemcAttrInfo::default_instance_->InitAsDefaultInstance();
  MemcUserAttrInfo::default_instance_->InitAsDefaultInstance();
  MemcUserAttrTypeInfo::default_instance_->InitAsDefaultInstance();
  MmapUserAttrTypeTree::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_memcache_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_memcache_2eproto {
  StaticDescriptorInitializer_memcache_2eproto() {
    protobuf_AddDesc_memcache_2eproto();
  }
} static_descriptor_initializer_memcache_2eproto_;

const ::google::protobuf::EnumDescriptor* AttrInfoFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrInfoFlag_descriptor_;
}
bool AttrInfoFlag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AttrVal::kIdxFieldNumber;
const int AttrVal::kValFieldNumber;
#endif  // !_MSC_VER

AttrVal::AttrVal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrVal::InitAsDefaultInstance() {
}

AttrVal::AttrVal(const AttrVal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrVal::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrVal::~AttrVal() {
  SharedDtor();
}

void AttrVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrVal_descriptor_;
}

const AttrVal& AttrVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

AttrVal* AttrVal::default_instance_ = NULL;

AttrVal* AttrVal::New() const {
  return new AttrVal;
}

void AttrVal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }
      
      // optional uint32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }
  
  // optional uint32 val = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrVal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }
  
  // optional uint32 val = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrVal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }
    
    // optional uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrVal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrVal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrVal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrVal::MergeFrom(const AttrVal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_idx(from.idx());
    }
    if (from._has_bit(1)) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrVal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrVal::CopyFrom(const AttrVal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrVal::IsInitialized() const {
  
  return true;
}

void AttrVal::Swap(AttrVal* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrVal_descriptor_;
  metadata.reflection = AttrVal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MtMemcacheMachineAttrDayVal::kAttrValFieldNumber;
const int MtMemcacheMachineAttrDayVal::kMaxIdxFieldNumber;
#endif  // !_MSC_VER

MtMemcacheMachineAttrDayVal::MtMemcacheMachineAttrDayVal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MtMemcacheMachineAttrDayVal::InitAsDefaultInstance() {
}

MtMemcacheMachineAttrDayVal::MtMemcacheMachineAttrDayVal(const MtMemcacheMachineAttrDayVal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MtMemcacheMachineAttrDayVal::SharedCtor() {
  _cached_size_ = 0;
  max_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MtMemcacheMachineAttrDayVal::~MtMemcacheMachineAttrDayVal() {
  SharedDtor();
}

void MtMemcacheMachineAttrDayVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MtMemcacheMachineAttrDayVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MtMemcacheMachineAttrDayVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MtMemcacheMachineAttrDayVal_descriptor_;
}

const MtMemcacheMachineAttrDayVal& MtMemcacheMachineAttrDayVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MtMemcacheMachineAttrDayVal* MtMemcacheMachineAttrDayVal::default_instance_ = NULL;

MtMemcacheMachineAttrDayVal* MtMemcacheMachineAttrDayVal::New() const {
  return new MtMemcacheMachineAttrDayVal;
}

void MtMemcacheMachineAttrDayVal::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    max_idx_ = 0u;
  }
  attr_val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MtMemcacheMachineAttrDayVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comm.AttrVal attr_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attr_val;
        if (input->ExpectTag(16)) goto parse_max_idx;
        break;
      }
      
      // optional uint32 max_idx = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_idx_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MtMemcacheMachineAttrDayVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .comm.AttrVal attr_val = 1;
  for (int i = 0; i < this->attr_val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr_val(i), output);
  }
  
  // optional uint32 max_idx = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_idx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MtMemcacheMachineAttrDayVal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .comm.AttrVal attr_val = 1;
  for (int i = 0; i < this->attr_val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr_val(i), target);
  }
  
  // optional uint32 max_idx = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_idx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MtMemcacheMachineAttrDayVal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 max_idx = 2 [default = 0];
    if (has_max_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_idx());
    }
    
  }
  // repeated .comm.AttrVal attr_val = 1;
  total_size += 1 * this->attr_val_size();
  for (int i = 0; i < this->attr_val_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_val(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MtMemcacheMachineAttrDayVal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MtMemcacheMachineAttrDayVal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MtMemcacheMachineAttrDayVal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MtMemcacheMachineAttrDayVal::MergeFrom(const MtMemcacheMachineAttrDayVal& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_val_.MergeFrom(from.attr_val_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_max_idx(from.max_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MtMemcacheMachineAttrDayVal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MtMemcacheMachineAttrDayVal::CopyFrom(const MtMemcacheMachineAttrDayVal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtMemcacheMachineAttrDayVal::IsInitialized() const {
  
  return true;
}

void MtMemcacheMachineAttrDayVal::Swap(MtMemcacheMachineAttrDayVal* other) {
  if (other != this) {
    attr_val_.Swap(&other->attr_val_);
    std::swap(max_idx_, other->max_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MtMemcacheMachineAttrDayVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MtMemcacheMachineAttrDayVal_descriptor_;
  metadata.reflection = MtMemcacheMachineAttrDayVal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonitorMemcache::kMachineAttrDayValFieldNumber;
const int MonitorMemcache::kNowStaticValFieldNumber;
#endif  // !_MSC_VER

MonitorMemcache::MonitorMemcache()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonitorMemcache::InitAsDefaultInstance() {
  machine_attr_day_val_ = const_cast< ::comm::MtMemcacheMachineAttrDayVal*>(&::comm::MtMemcacheMachineAttrDayVal::default_instance());
}

MonitorMemcache::MonitorMemcache(const MonitorMemcache& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonitorMemcache::SharedCtor() {
  _cached_size_ = 0;
  machine_attr_day_val_ = NULL;
  now_static_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorMemcache::~MonitorMemcache() {
  SharedDtor();
}

void MonitorMemcache::SharedDtor() {
  if (this != default_instance_) {
    delete machine_attr_day_val_;
  }
}

void MonitorMemcache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorMemcache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorMemcache_descriptor_;
}

const MonitorMemcache& MonitorMemcache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MonitorMemcache* MonitorMemcache::default_instance_ = NULL;

MonitorMemcache* MonitorMemcache::New() const {
  return new MonitorMemcache;
}

void MonitorMemcache::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (machine_attr_day_val_ != NULL) machine_attr_day_val_->::comm::MtMemcacheMachineAttrDayVal::Clear();
    }
    now_static_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonitorMemcache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .comm.MtMemcacheMachineAttrDayVal machine_attr_day_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_attr_day_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_now_static_val;
        break;
      }
      
      // optional uint32 now_static_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_static_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_static_val_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonitorMemcache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .comm.MtMemcacheMachineAttrDayVal machine_attr_day_val = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine_attr_day_val(), output);
  }
  
  // optional uint32 now_static_val = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->now_static_val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonitorMemcache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .comm.MtMemcacheMachineAttrDayVal machine_attr_day_val = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine_attr_day_val(), target);
  }
  
  // optional uint32 now_static_val = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->now_static_val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonitorMemcache::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .comm.MtMemcacheMachineAttrDayVal machine_attr_day_val = 1;
    if (has_machine_attr_day_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine_attr_day_val());
    }
    
    // optional uint32 now_static_val = 2;
    if (has_now_static_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->now_static_val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorMemcache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonitorMemcache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonitorMemcache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonitorMemcache::MergeFrom(const MonitorMemcache& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_machine_attr_day_val()->::comm::MtMemcacheMachineAttrDayVal::MergeFrom(from.machine_attr_day_val());
    }
    if (from._has_bit(1)) {
      set_now_static_val(from.now_static_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonitorMemcache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorMemcache::CopyFrom(const MonitorMemcache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorMemcache::IsInitialized() const {
  
  return true;
}

void MonitorMemcache::Swap(MonitorMemcache* other) {
  if (other != this) {
    std::swap(machine_attr_day_val_, other->machine_attr_day_val_);
    std::swap(now_static_val_, other->now_static_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonitorMemcache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorMemcache_descriptor_;
  metadata.reflection = MonitorMemcache_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemcTimeInfo::kIdFieldNumber;
const int MemcTimeInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

MemcTimeInfo::MemcTimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcTimeInfo::InitAsDefaultInstance() {
}

MemcTimeInfo::MemcTimeInfo(const MemcTimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcTimeInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcTimeInfo::~MemcTimeInfo() {
  SharedDtor();
}

void MemcTimeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemcTimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcTimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcTimeInfo_descriptor_;
}

const MemcTimeInfo& MemcTimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcTimeInfo* MemcTimeInfo::default_instance_ = NULL;

MemcTimeInfo* MemcTimeInfo::New() const {
  return new MemcTimeInfo;
}

void MemcTimeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcTimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcTimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcTimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcTimeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcTimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcTimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcTimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcTimeInfo::MergeFrom(const MemcTimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcTimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcTimeInfo::CopyFrom(const MemcTimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcTimeInfo::IsInitialized() const {
  
  return true;
}

void MemcTimeInfo::Swap(MemcTimeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcTimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcTimeInfo_descriptor_;
  metadata.reflection = MemcTimeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemcTimeInfoAll::kInfoFieldNumber;
#endif  // !_MSC_VER

MemcTimeInfoAll::MemcTimeInfoAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcTimeInfoAll::InitAsDefaultInstance() {
}

MemcTimeInfoAll::MemcTimeInfoAll(const MemcTimeInfoAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcTimeInfoAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcTimeInfoAll::~MemcTimeInfoAll() {
  SharedDtor();
}

void MemcTimeInfoAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemcTimeInfoAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcTimeInfoAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcTimeInfoAll_descriptor_;
}

const MemcTimeInfoAll& MemcTimeInfoAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcTimeInfoAll* MemcTimeInfoAll::default_instance_ = NULL;

MemcTimeInfoAll* MemcTimeInfoAll::New() const {
  return new MemcTimeInfoAll;
}

void MemcTimeInfoAll::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcTimeInfoAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comm.MemcTimeInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcTimeInfoAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .comm.MemcTimeInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcTimeInfoAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .comm.MemcTimeInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcTimeInfoAll::ByteSize() const {
  int total_size = 0;
  
  // repeated .comm.MemcTimeInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcTimeInfoAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcTimeInfoAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcTimeInfoAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcTimeInfoAll::MergeFrom(const MemcTimeInfoAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcTimeInfoAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcTimeInfoAll::CopyFrom(const MemcTimeInfoAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcTimeInfoAll::IsInitialized() const {
  
  return true;
}

void MemcTimeInfoAll::Swap(MemcTimeInfoAll* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcTimeInfoAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcTimeInfoAll_descriptor_;
  metadata.reflection = MemcTimeInfoAll_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MemcViewInfo::_default_view_name_;
#ifndef _MSC_VER
const int MemcViewInfo::kViewNameFieldNumber;
#endif  // !_MSC_VER

MemcViewInfo::MemcViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcViewInfo::InitAsDefaultInstance() {
}

MemcViewInfo::MemcViewInfo(const MemcViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcViewInfo::SharedCtor() {
  _cached_size_ = 0;
  view_name_ = const_cast< ::std::string*>(&_default_view_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcViewInfo::~MemcViewInfo() {
  SharedDtor();
}

void MemcViewInfo::SharedDtor() {
  if (view_name_ != &_default_view_name_) {
    delete view_name_;
  }
  if (this != default_instance_) {
  }
}

void MemcViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcViewInfo_descriptor_;
}

const MemcViewInfo& MemcViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcViewInfo* MemcViewInfo::default_instance_ = NULL;

MemcViewInfo* MemcViewInfo::New() const {
  return new MemcViewInfo;
}

void MemcViewInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (view_name_ != &_default_view_name_) {
        view_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string view_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->view_name().data(), this->view_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string view_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->view_name().data(), this->view_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->view_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string view_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->view_name().data(), this->view_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->view_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcViewInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string view_name = 1;
    if (has_view_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcViewInfo::MergeFrom(const MemcViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_view_name(from.view_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcViewInfo::CopyFrom(const MemcViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcViewInfo::IsInitialized() const {
  
  return true;
}

void MemcViewInfo::Swap(MemcViewInfo* other) {
  if (other != this) {
    std::swap(view_name_, other->view_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcViewInfo_descriptor_;
  metadata.reflection = MemcViewInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MemcMachineInfo::_default_name_;
#ifndef _MSC_VER
const int MemcMachineInfo::kIp1FieldNumber;
const int MemcMachineInfo::kIp2FieldNumber;
const int MemcMachineInfo::kIp3FieldNumber;
const int MemcMachineInfo::kIp4FieldNumber;
const int MemcMachineInfo::kNameFieldNumber;
#endif  // !_MSC_VER

MemcMachineInfo::MemcMachineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcMachineInfo::InitAsDefaultInstance() {
}

MemcMachineInfo::MemcMachineInfo(const MemcMachineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcMachineInfo::SharedCtor() {
  _cached_size_ = 0;
  ip1_ = 0u;
  ip2_ = 0u;
  ip3_ = 0u;
  ip4_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcMachineInfo::~MemcMachineInfo() {
  SharedDtor();
}

void MemcMachineInfo::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MemcMachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcMachineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcMachineInfo_descriptor_;
}

const MemcMachineInfo& MemcMachineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcMachineInfo* MemcMachineInfo::default_instance_ = NULL;

MemcMachineInfo* MemcMachineInfo::New() const {
  return new MemcMachineInfo;
}

void MemcMachineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip1_ = 0u;
    ip2_ = 0u;
    ip3_ = 0u;
    ip4_ = 0u;
    if (_has_bit(4)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcMachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip1_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ip2;
        break;
      }
      
      // optional uint32 ip2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip2_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ip3;
        break;
      }
      
      // optional uint32 ip3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip3_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ip4;
        break;
      }
      
      // optional uint32 ip4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip4_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcMachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ip1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip1(), output);
  }
  
  // optional uint32 ip2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip2(), output);
  }
  
  // optional uint32 ip3 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ip3(), output);
  }
  
  // optional uint32 ip4 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ip4(), output);
  }
  
  // optional string name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcMachineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ip1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip1(), target);
  }
  
  // optional uint32 ip2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip2(), target);
  }
  
  // optional uint32 ip3 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ip3(), target);
  }
  
  // optional uint32 ip4 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ip4(), target);
  }
  
  // optional string name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcMachineInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ip1 = 1;
    if (has_ip1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip1());
    }
    
    // optional uint32 ip2 = 2;
    if (has_ip2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip2());
    }
    
    // optional uint32 ip3 = 3;
    if (has_ip3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip3());
    }
    
    // optional uint32 ip4 = 4;
    if (has_ip4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip4());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcMachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcMachineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcMachineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcMachineInfo::MergeFrom(const MemcMachineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip1(from.ip1());
    }
    if (from._has_bit(1)) {
      set_ip2(from.ip2());
    }
    if (from._has_bit(2)) {
      set_ip3(from.ip3());
    }
    if (from._has_bit(3)) {
      set_ip4(from.ip4());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcMachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcMachineInfo::CopyFrom(const MemcMachineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcMachineInfo::IsInitialized() const {
  
  return true;
}

void MemcMachineInfo::Swap(MemcMachineInfo* other) {
  if (other != this) {
    std::swap(ip1_, other->ip1_);
    std::swap(ip2_, other->ip2_);
    std::swap(ip3_, other->ip3_);
    std::swap(ip4_, other->ip4_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcMachineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcMachineInfo_descriptor_;
  metadata.reflection = MemcMachineInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MemcAttrTypeInfo::_default_attr_type_name_;
#ifndef _MSC_VER
const int MemcAttrTypeInfo::kAttrTypeNameFieldNumber;
const int MemcAttrTypeInfo::kAttrTypeIdFieldNumber;
#endif  // !_MSC_VER

MemcAttrTypeInfo::MemcAttrTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcAttrTypeInfo::InitAsDefaultInstance() {
}

MemcAttrTypeInfo::MemcAttrTypeInfo(const MemcAttrTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcAttrTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  attr_type_name_ = const_cast< ::std::string*>(&_default_attr_type_name_);
  attr_type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcAttrTypeInfo::~MemcAttrTypeInfo() {
  SharedDtor();
}

void MemcAttrTypeInfo::SharedDtor() {
  if (attr_type_name_ != &_default_attr_type_name_) {
    delete attr_type_name_;
  }
  if (this != default_instance_) {
  }
}

void MemcAttrTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcAttrTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcAttrTypeInfo_descriptor_;
}

const MemcAttrTypeInfo& MemcAttrTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcAttrTypeInfo* MemcAttrTypeInfo::default_instance_ = NULL;

MemcAttrTypeInfo* MemcAttrTypeInfo::New() const {
  return new MemcAttrTypeInfo;
}

void MemcAttrTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (attr_type_name_ != &_default_attr_type_name_) {
        attr_type_name_->clear();
      }
    }
    attr_type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcAttrTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string attr_type_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attr_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attr_type_name().data(), this->attr_type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_type_id;
        break;
      }
      
      // optional int32 attr_type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcAttrTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string attr_type_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attr_type_name().data(), this->attr_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attr_type_name(), output);
  }
  
  // optional int32 attr_type_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr_type_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcAttrTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string attr_type_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attr_type_name().data(), this->attr_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attr_type_name(), target);
  }
  
  // optional int32 attr_type_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attr_type_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcAttrTypeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string attr_type_name = 1;
    if (has_attr_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attr_type_name());
    }
    
    // optional int32 attr_type_id = 2;
    if (has_attr_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcAttrTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcAttrTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcAttrTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcAttrTypeInfo::MergeFrom(const MemcAttrTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attr_type_name(from.attr_type_name());
    }
    if (from._has_bit(1)) {
      set_attr_type_id(from.attr_type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcAttrTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcAttrTypeInfo::CopyFrom(const MemcAttrTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcAttrTypeInfo::IsInitialized() const {
  
  return true;
}

void MemcAttrTypeInfo::Swap(MemcAttrTypeInfo* other) {
  if (other != this) {
    std::swap(attr_type_name_, other->attr_type_name_);
    std::swap(attr_type_id_, other->attr_type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcAttrTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcAttrTypeInfo_descriptor_;
  metadata.reflection = MemcAttrTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MemcAttrInfo::_default_attr_name_;
#ifndef _MSC_VER
const int MemcAttrInfo::kAttrNameFieldNumber;
#endif  // !_MSC_VER

MemcAttrInfo::MemcAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcAttrInfo::InitAsDefaultInstance() {
}

MemcAttrInfo::MemcAttrInfo(const MemcAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  attr_name_ = const_cast< ::std::string*>(&_default_attr_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcAttrInfo::~MemcAttrInfo() {
  SharedDtor();
}

void MemcAttrInfo::SharedDtor() {
  if (attr_name_ != &_default_attr_name_) {
    delete attr_name_;
  }
  if (this != default_instance_) {
  }
}

void MemcAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcAttrInfo_descriptor_;
}

const MemcAttrInfo& MemcAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcAttrInfo* MemcAttrInfo::default_instance_ = NULL;

MemcAttrInfo* MemcAttrInfo::New() const {
  return new MemcAttrInfo;
}

void MemcAttrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (attr_name_ != &_default_attr_name_) {
        attr_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string attr_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attr_name().data(), this->attr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string attr_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attr_name().data(), this->attr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attr_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string attr_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attr_name().data(), this->attr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attr_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcAttrInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string attr_name = 1;
    if (has_attr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attr_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcAttrInfo::MergeFrom(const MemcAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attr_name(from.attr_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcAttrInfo::CopyFrom(const MemcAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcAttrInfo::IsInitialized() const {
  
  return true;
}

void MemcAttrInfo::Swap(MemcAttrInfo* other) {
  if (other != this) {
    std::swap(attr_name_, other->attr_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcAttrInfo_descriptor_;
  metadata.reflection = MemcAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemcUserAttrInfo::kAttrInfoSeqFieldNumber;
const int MemcUserAttrInfo::kAttrListFieldNumber;
#endif  // !_MSC_VER

MemcUserAttrInfo::MemcUserAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcUserAttrInfo::InitAsDefaultInstance() {
}

MemcUserAttrInfo::MemcUserAttrInfo(const MemcUserAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcUserAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  attr_info_seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcUserAttrInfo::~MemcUserAttrInfo() {
  SharedDtor();
}

void MemcUserAttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemcUserAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcUserAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcUserAttrInfo_descriptor_;
}

const MemcUserAttrInfo& MemcUserAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcUserAttrInfo* MemcUserAttrInfo::default_instance_ = NULL;

MemcUserAttrInfo* MemcUserAttrInfo::New() const {
  return new MemcUserAttrInfo;
}

void MemcUserAttrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_info_seq_ = 0u;
  }
  attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcUserAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attr_info_seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_info_seq_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_list;
        break;
      }
      
      // repeated .comm.MemcAttrInfo attr_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcUserAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attr_info_seq = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_info_seq(), output);
  }
  
  // repeated .comm.MemcAttrInfo attr_list = 2;
  for (int i = 0; i < this->attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcUserAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attr_info_seq = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attr_info_seq(), target);
  }
  
  // repeated .comm.MemcAttrInfo attr_list = 2;
  for (int i = 0; i < this->attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcUserAttrInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attr_info_seq = 1;
    if (has_attr_info_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_info_seq());
    }
    
  }
  // repeated .comm.MemcAttrInfo attr_list = 2;
  total_size += 1 * this->attr_list_size();
  for (int i = 0; i < this->attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcUserAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcUserAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcUserAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcUserAttrInfo::MergeFrom(const MemcUserAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_list_.MergeFrom(from.attr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attr_info_seq(from.attr_info_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcUserAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcUserAttrInfo::CopyFrom(const MemcUserAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcUserAttrInfo::IsInitialized() const {
  
  return true;
}

void MemcUserAttrInfo::Swap(MemcUserAttrInfo* other) {
  if (other != this) {
    std::swap(attr_info_seq_, other->attr_info_seq_);
    attr_list_.Swap(&other->attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcUserAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcUserAttrInfo_descriptor_;
  metadata.reflection = MemcUserAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemcUserAttrTypeInfo::kAttrTypeInfoSeqFieldNumber;
const int MemcUserAttrTypeInfo::kAttrTypeListFieldNumber;
#endif  // !_MSC_VER

MemcUserAttrTypeInfo::MemcUserAttrTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemcUserAttrTypeInfo::InitAsDefaultInstance() {
}

MemcUserAttrTypeInfo::MemcUserAttrTypeInfo(const MemcUserAttrTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemcUserAttrTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  attr_type_info_seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemcUserAttrTypeInfo::~MemcUserAttrTypeInfo() {
  SharedDtor();
}

void MemcUserAttrTypeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemcUserAttrTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemcUserAttrTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemcUserAttrTypeInfo_descriptor_;
}

const MemcUserAttrTypeInfo& MemcUserAttrTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MemcUserAttrTypeInfo* MemcUserAttrTypeInfo::default_instance_ = NULL;

MemcUserAttrTypeInfo* MemcUserAttrTypeInfo::New() const {
  return new MemcUserAttrTypeInfo;
}

void MemcUserAttrTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_info_seq_ = 0u;
  }
  attr_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemcUserAttrTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attr_type_info_seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_type_info_seq_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_type_list;
        break;
      }
      
      // repeated .comm.MemcAttrTypeInfo attr_type_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_type_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_type_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_type_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemcUserAttrTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attr_type_info_seq = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attr_type_info_seq(), output);
  }
  
  // repeated .comm.MemcAttrTypeInfo attr_type_list = 2;
  for (int i = 0; i < this->attr_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr_type_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemcUserAttrTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attr_type_info_seq = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attr_type_info_seq(), target);
  }
  
  // repeated .comm.MemcAttrTypeInfo attr_type_list = 2;
  for (int i = 0; i < this->attr_type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr_type_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemcUserAttrTypeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attr_type_info_seq = 1;
    if (has_attr_type_info_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_type_info_seq());
    }
    
  }
  // repeated .comm.MemcAttrTypeInfo attr_type_list = 2;
  total_size += 1 * this->attr_type_list_size();
  for (int i = 0; i < this->attr_type_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_type_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemcUserAttrTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemcUserAttrTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemcUserAttrTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemcUserAttrTypeInfo::MergeFrom(const MemcUserAttrTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_type_list_.MergeFrom(from.attr_type_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attr_type_info_seq(from.attr_type_info_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemcUserAttrTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemcUserAttrTypeInfo::CopyFrom(const MemcUserAttrTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemcUserAttrTypeInfo::IsInitialized() const {
  
  return true;
}

void MemcUserAttrTypeInfo::Swap(MemcUserAttrTypeInfo* other) {
  if (other != this) {
    std::swap(attr_type_info_seq_, other->attr_type_info_seq_);
    attr_type_list_.Swap(&other->attr_type_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemcUserAttrTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemcUserAttrTypeInfo_descriptor_;
  metadata.reflection = MemcUserAttrTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MmapUserAttrTypeTree::kAttrTypeIdFieldNumber;
const int MmapUserAttrTypeTree::kSubTypeListFieldNumber;
#endif  // !_MSC_VER

MmapUserAttrTypeTree::MmapUserAttrTypeTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MmapUserAttrTypeTree::InitAsDefaultInstance() {
}

MmapUserAttrTypeTree::MmapUserAttrTypeTree(const MmapUserAttrTypeTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MmapUserAttrTypeTree::SharedCtor() {
  _cached_size_ = 0;
  attr_type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MmapUserAttrTypeTree::~MmapUserAttrTypeTree() {
  SharedDtor();
}

void MmapUserAttrTypeTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MmapUserAttrTypeTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MmapUserAttrTypeTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MmapUserAttrTypeTree_descriptor_;
}

const MmapUserAttrTypeTree& MmapUserAttrTypeTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memcache_2eproto();  return *default_instance_;
}

MmapUserAttrTypeTree* MmapUserAttrTypeTree::default_instance_ = NULL;

MmapUserAttrTypeTree* MmapUserAttrTypeTree::New() const {
  return new MmapUserAttrTypeTree;
}

void MmapUserAttrTypeTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_id_ = 0;
  }
  sub_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MmapUserAttrTypeTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attr_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sub_type_list;
        break;
      }
      
      // repeated .comm.MmapUserAttrTypeTree sub_type_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_type_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_type_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sub_type_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MmapUserAttrTypeTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 attr_type_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attr_type_id(), output);
  }
  
  // repeated .comm.MmapUserAttrTypeTree sub_type_list = 2;
  for (int i = 0; i < this->sub_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub_type_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MmapUserAttrTypeTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 attr_type_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attr_type_id(), target);
  }
  
  // repeated .comm.MmapUserAttrTypeTree sub_type_list = 2;
  for (int i = 0; i < this->sub_type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sub_type_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MmapUserAttrTypeTree::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attr_type_id = 1;
    if (has_attr_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type_id());
    }
    
  }
  // repeated .comm.MmapUserAttrTypeTree sub_type_list = 2;
  total_size += 1 * this->sub_type_list_size();
  for (int i = 0; i < this->sub_type_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_type_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MmapUserAttrTypeTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MmapUserAttrTypeTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MmapUserAttrTypeTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MmapUserAttrTypeTree::MergeFrom(const MmapUserAttrTypeTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_type_list_.MergeFrom(from.sub_type_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_attr_type_id(from.attr_type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MmapUserAttrTypeTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MmapUserAttrTypeTree::CopyFrom(const MmapUserAttrTypeTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmapUserAttrTypeTree::IsInitialized() const {
  
  return true;
}

void MmapUserAttrTypeTree::Swap(MmapUserAttrTypeTree* other) {
  if (other != this) {
    std::swap(attr_type_id_, other->attr_type_id_);
    sub_type_list_.Swap(&other->sub_type_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MmapUserAttrTypeTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MmapUserAttrTypeTree_descriptor_;
  metadata.reflection = MmapUserAttrTypeTree_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
